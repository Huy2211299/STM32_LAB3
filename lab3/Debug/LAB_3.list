
LAB_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003434  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003564  08003564  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08003564  08003564  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003564  08003564  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800356c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000008c  080035f8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080035f8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5ee  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0a  00000000  00000000  0002a6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f40  00000000  00000000  0002d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddbd  00000000  00000000  00044908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082d58  00000000  00000000  000526c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d541d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c40  00000000  00000000  000d5470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003528 	.word	0x08003528

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08003528 	.word	0x08003528

0800014c <isButton1Pressed>:
int KeyReg2[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int KeyReg3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress = 300;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000a8 	.word	0x200000a8

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000ac 	.word	0x200000ac

08000194 <isButton3Pressed>:
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000b0 	.word	0x200000b0

080001b8 <getKeyInput>:
void getKeyInput(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	e0a2      	b.n	800030a <getKeyInput+0x152>
		KeyReg0[i] = KeyReg1[i];
 80001c4:	4a55      	ldr	r2, [pc, #340]	; (800031c <getKeyInput+0x164>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4954      	ldr	r1, [pc, #336]	; (8000320 <getKeyInput+0x168>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001d4:	4a53      	ldr	r2, [pc, #332]	; (8000324 <getKeyInput+0x16c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001dc:	494f      	ldr	r1, [pc, #316]	; (800031c <getKeyInput+0x164>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(i == 0)KeyReg2[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d10a      	bne.n	8000200 <getKeyInput+0x48>
 80001ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ee:	484e      	ldr	r0, [pc, #312]	; (8000328 <getKeyInput+0x170>)
 80001f0:	f002 f96e 	bl	80024d0 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4619      	mov	r1, r3
 80001f8:	4a4a      	ldr	r2, [pc, #296]	; (8000324 <getKeyInput+0x16c>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(i == 1)KeyReg2[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d10a      	bne.n	800021c <getKeyInput+0x64>
 8000206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800020a:	4847      	ldr	r0, [pc, #284]	; (8000328 <getKeyInput+0x170>)
 800020c:	f002 f960 	bl	80024d0 <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
 8000212:	4619      	mov	r1, r3
 8000214:	4a43      	ldr	r2, [pc, #268]	; (8000324 <getKeyInput+0x16c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(i == 2)KeyReg2[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b02      	cmp	r3, #2
 8000220:	d10a      	bne.n	8000238 <getKeyInput+0x80>
 8000222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000226:	4840      	ldr	r0, [pc, #256]	; (8000328 <getKeyInput+0x170>)
 8000228:	f002 f952 	bl	80024d0 <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	4619      	mov	r1, r3
 8000230:	4a3c      	ldr	r2, [pc, #240]	; (8000324 <getKeyInput+0x16c>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000238:	4a39      	ldr	r2, [pc, #228]	; (8000320 <getKeyInput+0x168>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	4936      	ldr	r1, [pc, #216]	; (800031c <getKeyInput+0x164>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d15b      	bne.n	8000304 <getKeyInput+0x14c>
 800024c:	4a33      	ldr	r2, [pc, #204]	; (800031c <getKeyInput+0x164>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4933      	ldr	r1, [pc, #204]	; (8000324 <getKeyInput+0x16c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d151      	bne.n	8000304 <getKeyInput+0x14c>
			if(KeyReg3[i] != KeyReg2[i]){
 8000260:	4a32      	ldr	r2, [pc, #200]	; (800032c <getKeyInput+0x174>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	492e      	ldr	r1, [pc, #184]	; (8000324 <getKeyInput+0x16c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000270:	429a      	cmp	r2, r3
 8000272:	d023      	beq.n	80002bc <getKeyInput+0x104>
				KeyReg3[i] = KeyReg2[i];
 8000274:	4a2b      	ldr	r2, [pc, #172]	; (8000324 <getKeyInput+0x16c>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027c:	492b      	ldr	r1, [pc, #172]	; (800032c <getKeyInput+0x174>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 8000284:	4a27      	ldr	r2, [pc, #156]	; (8000324 <getKeyInput+0x16c>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d139      	bne.n	8000304 <getKeyInput+0x14c>
					//TODO
					if(i == 0)button1_flag = 1;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d102      	bne.n	800029c <getKeyInput+0xe4>
 8000296:	4b26      	ldr	r3, [pc, #152]	; (8000330 <getKeyInput+0x178>)
 8000298:	2201      	movs	r2, #1
 800029a:	601a      	str	r2, [r3, #0]
					if(i == 1)button2_flag = 1;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d102      	bne.n	80002a8 <getKeyInput+0xf0>
 80002a2:	4b24      	ldr	r3, [pc, #144]	; (8000334 <getKeyInput+0x17c>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	601a      	str	r2, [r3, #0]
					if(i == 2)button3_flag = 1;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d102      	bne.n	80002b4 <getKeyInput+0xfc>
 80002ae:	4b22      	ldr	r3, [pc, #136]	; (8000338 <getKeyInput+0x180>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	601a      	str	r2, [r3, #0]
					TimerForKeyPress = 200;
 80002b4:	4b21      	ldr	r3, [pc, #132]	; (800033c <getKeyInput+0x184>)
 80002b6:	22c8      	movs	r2, #200	; 0xc8
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	e023      	b.n	8000304 <getKeyInput+0x14c>
				}
			}
			else{
				TimerForKeyPress--;
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <getKeyInput+0x184>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	4a1e      	ldr	r2, [pc, #120]	; (800033c <getKeyInput+0x184>)
 80002c4:	6013      	str	r3, [r2, #0]
				if(TimerForKeyPress == 0){
 80002c6:	4b1d      	ldr	r3, [pc, #116]	; (800033c <getKeyInput+0x184>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d11a      	bne.n	8000304 <getKeyInput+0x14c>
					//TODO
					TimerForKeyPress = 200;
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <getKeyInput+0x184>)
 80002d0:	22c8      	movs	r2, #200	; 0xc8
 80002d2:	601a      	str	r2, [r3, #0]
					if(KeyReg2[i] == PRESSED_STATE){
 80002d4:	4a13      	ldr	r2, [pc, #76]	; (8000324 <getKeyInput+0x16c>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d111      	bne.n	8000304 <getKeyInput+0x14c>
						if(i == 0)button1_flag = 1;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d102      	bne.n	80002ec <getKeyInput+0x134>
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <getKeyInput+0x178>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
						if(i == 1)button2_flag = 1;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d102      	bne.n	80002f8 <getKeyInput+0x140>
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <getKeyInput+0x17c>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
						if(i == 2)button3_flag = 1;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2b02      	cmp	r3, #2
 80002fc:	d102      	bne.n	8000304 <getKeyInput+0x14c>
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <getKeyInput+0x180>)
 8000300:	2201      	movs	r2, #1
 8000302:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3301      	adds	r3, #1
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b02      	cmp	r3, #2
 800030e:	f77f af59 	ble.w	80001c4 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	2000000c 	.word	0x2000000c
 8000320:	20000000 	.word	0x20000000
 8000324:	20000018 	.word	0x20000018
 8000328:	40011000 	.word	0x40011000
 800032c:	20000024 	.word	0x20000024
 8000330:	200000a8 	.word	0x200000a8
 8000334:	200000ac 	.word	0x200000ac
 8000338:	200000b0 	.word	0x200000b0
 800033c:	20000030 	.word	0x20000030

08000340 <update7SEG_horizontal>:
 */
#include "control_7SEG.h"
#include "main.h"
#include "traffic_buffer.h"

void update7SEG_horizontal(int index_horizontal){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	switch(index_horizontal){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d003      	beq.n	8000356 <update7SEG_horizontal+0x16>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d012      	beq.n	800037a <update7SEG_horizontal+0x3a>
			display7SEG_horizontal(_7SEG_buffer_horizontal[1]);
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
			break;
	}
}
 8000354:	e023      	b.n	800039e <update7SEG_horizontal+0x5e>
			display7SEG_horizontal(_7SEG_buffer_horizontal[0]);
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <update7SEG_horizontal+0x68>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4618      	mov	r0, r3
 800035c:	f001 fa4a 	bl	80017f4 <display7SEG_horizontal>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000366:	4811      	ldr	r0, [pc, #68]	; (80003ac <update7SEG_horizontal+0x6c>)
 8000368:	f002 f8c9 	bl	80024fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000372:	480e      	ldr	r0, [pc, #56]	; (80003ac <update7SEG_horizontal+0x6c>)
 8000374:	f002 f8c3 	bl	80024fe <HAL_GPIO_WritePin>
			break;
 8000378:	e011      	b.n	800039e <update7SEG_horizontal+0x5e>
			display7SEG_horizontal(_7SEG_buffer_horizontal[1]);
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <update7SEG_horizontal+0x68>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fa38 	bl	80017f4 <display7SEG_horizontal>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800038a:	4808      	ldr	r0, [pc, #32]	; (80003ac <update7SEG_horizontal+0x6c>)
 800038c:	f002 f8b7 	bl	80024fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <update7SEG_horizontal+0x6c>)
 8000398:	f002 f8b1 	bl	80024fe <HAL_GPIO_WritePin>
			break;
 800039c:	bf00      	nop
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000128 	.word	0x20000128
 80003ac:	40010800 	.word	0x40010800

080003b0 <update7SEG_vertical>:

void update7SEG_vertical(int index_vertical){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	switch(index_vertical){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d003      	beq.n	80003c6 <update7SEG_vertical+0x16>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d012      	beq.n	80003ea <update7SEG_vertical+0x3a>
			display7SEG_vertical(_7SEG_buffer_vertical[1]);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
			break;
	}
}
 80003c4:	e023      	b.n	800040e <update7SEG_vertical+0x5e>
			display7SEG_vertical(_7SEG_buffer_vertical[0]);
 80003c6:	4b14      	ldr	r3, [pc, #80]	; (8000418 <update7SEG_vertical+0x68>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 fba2 	bl	8001b14 <display7SEG_vertical>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003d6:	4811      	ldr	r0, [pc, #68]	; (800041c <update7SEG_vertical+0x6c>)
 80003d8:	f002 f891 	bl	80024fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003e2:	480e      	ldr	r0, [pc, #56]	; (800041c <update7SEG_vertical+0x6c>)
 80003e4:	f002 f88b 	bl	80024fe <HAL_GPIO_WritePin>
			break;
 80003e8:	e011      	b.n	800040e <update7SEG_vertical+0x5e>
			display7SEG_vertical(_7SEG_buffer_vertical[1]);
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <update7SEG_vertical+0x68>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fb90 	bl	8001b14 <display7SEG_vertical>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003fa:	4808      	ldr	r0, [pc, #32]	; (800041c <update7SEG_vertical+0x6c>)
 80003fc:	f002 f87f 	bl	80024fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <update7SEG_vertical+0x6c>)
 8000408:	f002 f879 	bl	80024fe <HAL_GPIO_WritePin>
			break;
 800040c:	bf00      	nop
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000130 	.word	0x20000130
 800041c:	40010800 	.word	0x40010800

08000420 <fsm_7SEG_horizontal_run>:
#include "traffic_buffer.h"

int status_7SEG_horizontal = display_countDown_horizontal;


void fsm_7SEG_horizontal_run(){
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	switch(status_7SEG_horizontal){
 8000424:	4b44      	ldr	r3, [pc, #272]	; (8000538 <fsm_7SEG_horizontal_run+0x118>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b0b      	subs	r3, #11
 800042a:	2b03      	cmp	r3, #3
 800042c:	d878      	bhi.n	8000520 <fsm_7SEG_horizontal_run+0x100>
 800042e:	a201      	add	r2, pc, #4	; (adr r2, 8000434 <fsm_7SEG_horizontal_run+0x14>)
 8000430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000434:	08000445 	.word	0x08000445
 8000438:	08000473 	.word	0x08000473
 800043c:	080004ad 	.word	0x080004ad
 8000440:	080004e7 	.word	0x080004e7
		case display_countDown_horizontal:
			if(timer4_flag == 1){
 8000444:	4b3d      	ldr	r3, [pc, #244]	; (800053c <fsm_7SEG_horizontal_run+0x11c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d16b      	bne.n	8000524 <fsm_7SEG_horizontal_run+0x104>
				update7SEG_horizontal(index_horizontal++);
				if(index_horizontal == 2) index_horizontal = 0;
 800044c:	4b3c      	ldr	r3, [pc, #240]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	1c5a      	adds	r2, r3, #1
 8000452:	493b      	ldr	r1, [pc, #236]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 8000454:	600a      	str	r2, [r1, #0]
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff72 	bl	8000340 <update7SEG_horizontal>
				setTimer4(200);
 800045c:	4b38      	ldr	r3, [pc, #224]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b02      	cmp	r3, #2
 8000462:	d102      	bne.n	800046a <fsm_7SEG_horizontal_run+0x4a>
 8000464:	4b36      	ldr	r3, [pc, #216]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
			}
 800046a:	20c8      	movs	r0, #200	; 0xc8
 800046c:	f000 fe8e 	bl	800118c <setTimer4>
			break;
		case display_mode02:
 8000470:	e058      	b.n	8000524 <fsm_7SEG_horizontal_run+0x104>
			_7SEG_buffer_horizontal[0] = 0;
			_7SEG_buffer_horizontal[1] = 2;
 8000472:	4b34      	ldr	r3, [pc, #208]	; (8000544 <fsm_7SEG_horizontal_run+0x124>)
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
			if(timer4_flag == 1){
 8000478:	4b32      	ldr	r3, [pc, #200]	; (8000544 <fsm_7SEG_horizontal_run+0x124>)
 800047a:	2202      	movs	r2, #2
 800047c:	605a      	str	r2, [r3, #4]
				update7SEG_horizontal(index_horizontal++);
 800047e:	4b2f      	ldr	r3, [pc, #188]	; (800053c <fsm_7SEG_horizontal_run+0x11c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d150      	bne.n	8000528 <fsm_7SEG_horizontal_run+0x108>
				if(index_horizontal == 2) index_horizontal = 0;
				setTimer4(200);
 8000486:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	492c      	ldr	r1, [pc, #176]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 800048e:	600a      	str	r2, [r1, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff55 	bl	8000340 <update7SEG_horizontal>
			}
 8000496:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d102      	bne.n	80004a4 <fsm_7SEG_horizontal_run+0x84>
 800049e:	4b28      	ldr	r3, [pc, #160]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
			break;
 80004a4:	20c8      	movs	r0, #200	; 0xc8
 80004a6:	f000 fe71 	bl	800118c <setTimer4>
		case display_mode03:
			_7SEG_buffer_horizontal[0] = 0;
 80004aa:	e03d      	b.n	8000528 <fsm_7SEG_horizontal_run+0x108>
			_7SEG_buffer_horizontal[1] = 3;
			if(timer4_flag == 1){
 80004ac:	4b25      	ldr	r3, [pc, #148]	; (8000544 <fsm_7SEG_horizontal_run+0x124>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
				update7SEG_horizontal(index_horizontal++);
 80004b2:	4b24      	ldr	r3, [pc, #144]	; (8000544 <fsm_7SEG_horizontal_run+0x124>)
 80004b4:	2203      	movs	r2, #3
 80004b6:	605a      	str	r2, [r3, #4]
				if(index_horizontal == 2) index_horizontal = 0;
 80004b8:	4b20      	ldr	r3, [pc, #128]	; (800053c <fsm_7SEG_horizontal_run+0x11c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d135      	bne.n	800052c <fsm_7SEG_horizontal_run+0x10c>
				setTimer4(200);
			}
 80004c0:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	1c5a      	adds	r2, r3, #1
 80004c6:	491e      	ldr	r1, [pc, #120]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 80004c8:	600a      	str	r2, [r1, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ff38 	bl	8000340 <update7SEG_horizontal>
			break;
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	d102      	bne.n	80004de <fsm_7SEG_horizontal_run+0xbe>
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
		case display_mode04:
 80004de:	20c8      	movs	r0, #200	; 0xc8
 80004e0:	f000 fe54 	bl	800118c <setTimer4>
			_7SEG_buffer_horizontal[0] = 0;
			_7SEG_buffer_horizontal[1] = 4;
 80004e4:	e022      	b.n	800052c <fsm_7SEG_horizontal_run+0x10c>
			if(timer4_flag == 1){
				update7SEG_horizontal(index_horizontal++);
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <fsm_7SEG_horizontal_run+0x124>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
				if(index_horizontal == 2) index_horizontal = 0;
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <fsm_7SEG_horizontal_run+0x124>)
 80004ee:	2204      	movs	r2, #4
 80004f0:	605a      	str	r2, [r3, #4]
				setTimer4(200);
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <fsm_7SEG_horizontal_run+0x11c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d11a      	bne.n	8000530 <fsm_7SEG_horizontal_run+0x110>
			}
			break;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	490f      	ldr	r1, [pc, #60]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 8000502:	600a      	str	r2, [r1, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff1b 	bl	8000340 <update7SEG_horizontal>
		default:
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d102      	bne.n	8000518 <fsm_7SEG_horizontal_run+0xf8>
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <fsm_7SEG_horizontal_run+0x120>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
			break;
 8000518:	20c8      	movs	r0, #200	; 0xc8
 800051a:	f000 fe37 	bl	800118c <setTimer4>
	}
}
 800051e:	e007      	b.n	8000530 <fsm_7SEG_horizontal_run+0x110>
 8000520:	bf00      	nop
 8000522:	e006      	b.n	8000532 <fsm_7SEG_horizontal_run+0x112>
		case display_mode02:
 8000524:	bf00      	nop
 8000526:	e004      	b.n	8000532 <fsm_7SEG_horizontal_run+0x112>
			_7SEG_buffer_horizontal[0] = 0;
 8000528:	bf00      	nop
 800052a:	e002      	b.n	8000532 <fsm_7SEG_horizontal_run+0x112>
			_7SEG_buffer_horizontal[1] = 4;
 800052c:	bf00      	nop
 800052e:	e000      	b.n	8000532 <fsm_7SEG_horizontal_run+0x112>
}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000034 	.word	0x20000034
 800053c:	200000d8 	.word	0x200000d8
 8000540:	200000b8 	.word	0x200000b8
 8000544:	20000128 	.word	0x20000128

08000548 <fsm_7SEG_vertical_run>:
#include "global.h"
#include "control_7SEG.h"

int status_7SEG_vertical = display_countDown_vertical;

void fsm_7SEG_vertical_run(){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	switch(status_7SEG_vertical){
 800054c:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <fsm_7SEG_vertical_run+0x78>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b0f      	cmp	r3, #15
 8000552:	d002      	beq.n	800055a <fsm_7SEG_vertical_run+0x12>
 8000554:	2b10      	cmp	r3, #16
 8000556:	d017      	beq.n	8000588 <fsm_7SEG_vertical_run+0x40>
				if(index_vertical == 2) index_vertical = 0;
				setTimer6(200);
			}
			break;
		default:
			break;
 8000558:	e030      	b.n	80005bc <fsm_7SEG_vertical_run+0x74>
			if(timer6_flag == 1){
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <fsm_7SEG_vertical_run+0x7c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d129      	bne.n	80005b6 <fsm_7SEG_vertical_run+0x6e>
				update7SEG_vertical(index_vertical++);
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <fsm_7SEG_vertical_run+0x80>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	4917      	ldr	r1, [pc, #92]	; (80005c8 <fsm_7SEG_vertical_run+0x80>)
 800056a:	600a      	str	r2, [r1, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff1f 	bl	80003b0 <update7SEG_vertical>
				if(index_vertical == 2) index_vertical = 0;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <fsm_7SEG_vertical_run+0x80>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d102      	bne.n	8000580 <fsm_7SEG_vertical_run+0x38>
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <fsm_7SEG_vertical_run+0x80>)
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
				setTimer6(200);
 8000580:	20c8      	movs	r0, #200	; 0xc8
 8000582:	f000 fe37 	bl	80011f4 <setTimer6>
			break;
 8000586:	e016      	b.n	80005b6 <fsm_7SEG_vertical_run+0x6e>
			if(timer6_flag == 1){
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <fsm_7SEG_vertical_run+0x7c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d114      	bne.n	80005ba <fsm_7SEG_vertical_run+0x72>
				update7SEG_vertical(index_vertical++);
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <fsm_7SEG_vertical_run+0x80>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	1c5a      	adds	r2, r3, #1
 8000596:	490c      	ldr	r1, [pc, #48]	; (80005c8 <fsm_7SEG_vertical_run+0x80>)
 8000598:	600a      	str	r2, [r1, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ff08 	bl	80003b0 <update7SEG_vertical>
				if(index_vertical == 2) index_vertical = 0;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <fsm_7SEG_vertical_run+0x80>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d102      	bne.n	80005ae <fsm_7SEG_vertical_run+0x66>
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <fsm_7SEG_vertical_run+0x80>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
				setTimer6(200);
 80005ae:	20c8      	movs	r0, #200	; 0xc8
 80005b0:	f000 fe20 	bl	80011f4 <setTimer6>
			break;
 80005b4:	e001      	b.n	80005ba <fsm_7SEG_vertical_run+0x72>
			break;
 80005b6:	bf00      	nop
 80005b8:	e000      	b.n	80005bc <fsm_7SEG_vertical_run+0x74>
			break;
 80005ba:	bf00      	nop
	}
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000038 	.word	0x20000038
 80005c4:	200000e8 	.word	0x200000e8
 80005c8:	200000bc 	.word	0x200000bc

080005cc <fsm_system_run>:
#include "control_7SEG.h"
#include "traffic_buffer.h"
#include "fsm_traffic_blink.h"


void fsm_system_run(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	switch(status_system){
 80005d0:	4b8c      	ldr	r3, [pc, #560]	; (8000804 <fsm_system_run+0x238>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	f200 8113 	bhi.w	8000800 <fsm_system_run+0x234>
 80005da:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <fsm_system_run+0x14>)
 80005dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e0:	080005f5 	.word	0x080005f5
 80005e4:	080005fd 	.word	0x080005fd
 80005e8:	08000629 	.word	0x08000629
 80005ec:	080006bf 	.word	0x080006bf
 80005f0:	08000753 	.word	0x08000753
		case INIT:
			status_system = MODE1;
 80005f4:	4b83      	ldr	r3, [pc, #524]	; (8000804 <fsm_system_run+0x238>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]
			break;
 80005fa:	e101      	b.n	8000800 <fsm_system_run+0x234>
		case MODE1:
			status_traffic_horizontal = display_traffic_horizontal;
 80005fc:	4b82      	ldr	r3, [pc, #520]	; (8000808 <fsm_system_run+0x23c>)
 80005fe:	2205      	movs	r2, #5
 8000600:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = display_traffic_vertical;
 8000602:	4b82      	ldr	r3, [pc, #520]	; (800080c <fsm_system_run+0x240>)
 8000604:	2209      	movs	r2, #9
 8000606:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_countDown_horizontal;
 8000608:	4b81      	ldr	r3, [pc, #516]	; (8000810 <fsm_system_run+0x244>)
 800060a:	220b      	movs	r2, #11
 800060c:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_countDown_vertical;
 800060e:	4b81      	ldr	r3, [pc, #516]	; (8000814 <fsm_system_run+0x248>)
 8000610:	220f      	movs	r2, #15
 8000612:	601a      	str	r2, [r3, #0]
			if(isButton1Pressed() == 1){
 8000614:	f7ff fd9a 	bl	800014c <isButton1Pressed>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	f040 80e9 	bne.w	80007f2 <fsm_system_run+0x226>
				status_system = MODE2;
 8000620:	4b78      	ldr	r3, [pc, #480]	; (8000804 <fsm_system_run+0x238>)
 8000622:	2202      	movs	r2, #2
 8000624:	601a      	str	r2, [r3, #0]
			}
			break;
 8000626:	e0e4      	b.n	80007f2 <fsm_system_run+0x226>
		case MODE2:
			status_traffic_horizontal = modifying_led_red_horizontal;
 8000628:	4b77      	ldr	r3, [pc, #476]	; (8000808 <fsm_system_run+0x23c>)
 800062a:	2206      	movs	r2, #6
 800062c:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_red_vertical;
 800062e:	4b77      	ldr	r3, [pc, #476]	; (800080c <fsm_system_run+0x240>)
 8000630:	221e      	movs	r2, #30
 8000632:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode02;
 8000634:	4b76      	ldr	r3, [pc, #472]	; (8000810 <fsm_system_run+0x244>)
 8000636:	220c      	movs	r2, #12
 8000638:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 800063a:	4b76      	ldr	r3, [pc, #472]	; (8000814 <fsm_system_run+0x248>)
 800063c:	2210      	movs	r2, #16
 800063e:	601a      	str	r2, [r3, #0]

			if(isButton2Pressed() == 1){
 8000640:	f7ff fd96 	bl	8000170 <isButton2Pressed>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d109      	bne.n	800065e <fsm_system_run+0x92>
				time_red_horizontal++;
 800064a:	4b73      	ldr	r3, [pc, #460]	; (8000818 <fsm_system_run+0x24c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	4a71      	ldr	r2, [pc, #452]	; (8000818 <fsm_system_run+0x24c>)
 8000652:	6013      	str	r3, [r2, #0]
				time_red_vertical++;
 8000654:	4b71      	ldr	r3, [pc, #452]	; (800081c <fsm_system_run+0x250>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a70      	ldr	r2, [pc, #448]	; (800081c <fsm_system_run+0x250>)
 800065c:	6013      	str	r3, [r2, #0]
			}

			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 800065e:	4b6f      	ldr	r3, [pc, #444]	; (800081c <fsm_system_run+0x250>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a6f      	ldr	r2, [pc, #444]	; (8000820 <fsm_system_run+0x254>)
 8000664:	fb82 1203 	smull	r1, r2, r2, r3
 8000668:	1092      	asrs	r2, r2, #2
 800066a:	17db      	asrs	r3, r3, #31
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	4a6d      	ldr	r2, [pc, #436]	; (8000824 <fsm_system_run+0x258>)
 8000670:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 8000672:	4b6a      	ldr	r3, [pc, #424]	; (800081c <fsm_system_run+0x250>)
 8000674:	6819      	ldr	r1, [r3, #0]
 8000676:	4b6a      	ldr	r3, [pc, #424]	; (8000820 <fsm_system_run+0x254>)
 8000678:	fb83 2301 	smull	r2, r3, r3, r1
 800067c:	109a      	asrs	r2, r3, #2
 800067e:	17cb      	asrs	r3, r1, #31
 8000680:	1ad2      	subs	r2, r2, r3
 8000682:	4613      	mov	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	1aca      	subs	r2, r1, r3
 800068c:	4b65      	ldr	r3, [pc, #404]	; (8000824 <fsm_system_run+0x258>)
 800068e:	605a      	str	r2, [r3, #4]

			if(isButton3Pressed() == 1){
 8000690:	f7ff fd80 	bl	8000194 <isButton3Pressed>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	d107      	bne.n	80006aa <fsm_system_run+0xde>
				time_red_horizontal_temp = time_red_horizontal;
 800069a:	4b5f      	ldr	r3, [pc, #380]	; (8000818 <fsm_system_run+0x24c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a62      	ldr	r2, [pc, #392]	; (8000828 <fsm_system_run+0x25c>)
 80006a0:	6013      	str	r3, [r2, #0]
				time_red_vertical_temp = time_red_vertical;
 80006a2:	4b5e      	ldr	r3, [pc, #376]	; (800081c <fsm_system_run+0x250>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a61      	ldr	r2, [pc, #388]	; (800082c <fsm_system_run+0x260>)
 80006a8:	6013      	str	r3, [r2, #0]
			}

			if(isButton1Pressed() == 1){
 80006aa:	f7ff fd4f 	bl	800014c <isButton1Pressed>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	f040 80a0 	bne.w	80007f6 <fsm_system_run+0x22a>
				status_system = MODE3;
 80006b6:	4b53      	ldr	r3, [pc, #332]	; (8000804 <fsm_system_run+0x238>)
 80006b8:	2203      	movs	r2, #3
 80006ba:	601a      	str	r2, [r3, #0]
			}
			break;
 80006bc:	e09b      	b.n	80007f6 <fsm_system_run+0x22a>
		case MODE3:
			status_traffic_horizontal = modifying_led_yellow_horizontal;
 80006be:	4b52      	ldr	r3, [pc, #328]	; (8000808 <fsm_system_run+0x23c>)
 80006c0:	2208      	movs	r2, #8
 80006c2:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_yellow_vertical;
 80006c4:	4b51      	ldr	r3, [pc, #324]	; (800080c <fsm_system_run+0x240>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode03;
 80006ca:	4b51      	ldr	r3, [pc, #324]	; (8000810 <fsm_system_run+0x244>)
 80006cc:	220d      	movs	r2, #13
 80006ce:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 80006d0:	4b50      	ldr	r3, [pc, #320]	; (8000814 <fsm_system_run+0x248>)
 80006d2:	2210      	movs	r2, #16
 80006d4:	601a      	str	r2, [r3, #0]

			if(isButton2Pressed() == 1){
 80006d6:	f7ff fd4b 	bl	8000170 <isButton2Pressed>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d109      	bne.n	80006f4 <fsm_system_run+0x128>
				time_yellow_horizontal++;
 80006e0:	4b53      	ldr	r3, [pc, #332]	; (8000830 <fsm_system_run+0x264>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a52      	ldr	r2, [pc, #328]	; (8000830 <fsm_system_run+0x264>)
 80006e8:	6013      	str	r3, [r2, #0]
				time_yellow_vertical++;
 80006ea:	4b52      	ldr	r3, [pc, #328]	; (8000834 <fsm_system_run+0x268>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	4a50      	ldr	r2, [pc, #320]	; (8000834 <fsm_system_run+0x268>)
 80006f2:	6013      	str	r3, [r2, #0]
			}

			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 80006f4:	4b4f      	ldr	r3, [pc, #316]	; (8000834 <fsm_system_run+0x268>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a49      	ldr	r2, [pc, #292]	; (8000820 <fsm_system_run+0x254>)
 80006fa:	fb82 1203 	smull	r1, r2, r2, r3
 80006fe:	1092      	asrs	r2, r2, #2
 8000700:	17db      	asrs	r3, r3, #31
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	4a47      	ldr	r2, [pc, #284]	; (8000824 <fsm_system_run+0x258>)
 8000706:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 8000708:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <fsm_system_run+0x268>)
 800070a:	6819      	ldr	r1, [r3, #0]
 800070c:	4b44      	ldr	r3, [pc, #272]	; (8000820 <fsm_system_run+0x254>)
 800070e:	fb83 2301 	smull	r2, r3, r3, r1
 8000712:	109a      	asrs	r2, r3, #2
 8000714:	17cb      	asrs	r3, r1, #31
 8000716:	1ad2      	subs	r2, r2, r3
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	1aca      	subs	r2, r1, r3
 8000722:	4b40      	ldr	r3, [pc, #256]	; (8000824 <fsm_system_run+0x258>)
 8000724:	605a      	str	r2, [r3, #4]

			if(isButton3Pressed() == 1){
 8000726:	f7ff fd35 	bl	8000194 <isButton3Pressed>
 800072a:	4603      	mov	r3, r0
 800072c:	2b01      	cmp	r3, #1
 800072e:	d107      	bne.n	8000740 <fsm_system_run+0x174>
				time_yellow_horizontal_temp = time_yellow_horizontal;
 8000730:	4b3f      	ldr	r3, [pc, #252]	; (8000830 <fsm_system_run+0x264>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a40      	ldr	r2, [pc, #256]	; (8000838 <fsm_system_run+0x26c>)
 8000736:	6013      	str	r3, [r2, #0]
				time_yellow_vertical_temp = time_yellow_vertical;
 8000738:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <fsm_system_run+0x268>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a3f      	ldr	r2, [pc, #252]	; (800083c <fsm_system_run+0x270>)
 800073e:	6013      	str	r3, [r2, #0]
			}

			if(isButton1Pressed() == 1){
 8000740:	f7ff fd04 	bl	800014c <isButton1Pressed>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d157      	bne.n	80007fa <fsm_system_run+0x22e>
				status_system = MODE4;
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <fsm_system_run+0x238>)
 800074c:	2204      	movs	r2, #4
 800074e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000750:	e053      	b.n	80007fa <fsm_system_run+0x22e>
		case MODE4:
			status_traffic_horizontal = modifying_led_green_horizontal;
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <fsm_system_run+0x23c>)
 8000754:	2207      	movs	r2, #7
 8000756:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_green_vertical;
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <fsm_system_run+0x240>)
 800075a:	221f      	movs	r2, #31
 800075c:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode04;
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <fsm_system_run+0x244>)
 8000760:	220e      	movs	r2, #14
 8000762:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <fsm_system_run+0x248>)
 8000766:	2210      	movs	r2, #16
 8000768:	601a      	str	r2, [r3, #0]

			if(isButton2Pressed() == 1){
 800076a:	f7ff fd01 	bl	8000170 <isButton2Pressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d109      	bne.n	8000788 <fsm_system_run+0x1bc>
				time_green_horizontal++;
 8000774:	4b32      	ldr	r3, [pc, #200]	; (8000840 <fsm_system_run+0x274>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	4a31      	ldr	r2, [pc, #196]	; (8000840 <fsm_system_run+0x274>)
 800077c:	6013      	str	r3, [r2, #0]
				time_green_vertical++;
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <fsm_system_run+0x278>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	4a2f      	ldr	r2, [pc, #188]	; (8000844 <fsm_system_run+0x278>)
 8000786:	6013      	str	r3, [r2, #0]
			}

			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 8000788:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <fsm_system_run+0x278>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a24      	ldr	r2, [pc, #144]	; (8000820 <fsm_system_run+0x254>)
 800078e:	fb82 1203 	smull	r1, r2, r2, r3
 8000792:	1092      	asrs	r2, r2, #2
 8000794:	17db      	asrs	r3, r3, #31
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	4a22      	ldr	r2, [pc, #136]	; (8000824 <fsm_system_run+0x258>)
 800079a:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <fsm_system_run+0x278>)
 800079e:	6819      	ldr	r1, [r3, #0]
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <fsm_system_run+0x254>)
 80007a2:	fb83 2301 	smull	r2, r3, r3, r1
 80007a6:	109a      	asrs	r2, r3, #2
 80007a8:	17cb      	asrs	r3, r1, #31
 80007aa:	1ad2      	subs	r2, r2, r3
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	1aca      	subs	r2, r1, r3
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <fsm_system_run+0x258>)
 80007b8:	605a      	str	r2, [r3, #4]

			if(isButton3Pressed() == 1){
 80007ba:	f7ff fceb 	bl	8000194 <isButton3Pressed>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d107      	bne.n	80007d4 <fsm_system_run+0x208>
				time_green_horizontal_temp = time_green_horizontal;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <fsm_system_run+0x274>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <fsm_system_run+0x27c>)
 80007ca:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp = time_green_vertical;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <fsm_system_run+0x278>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <fsm_system_run+0x280>)
 80007d2:	6013      	str	r3, [r2, #0]
			}

			if(isButton1Pressed() == 1){
 80007d4:	f7ff fcba 	bl	800014c <isButton1Pressed>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d10f      	bne.n	80007fe <fsm_system_run+0x232>
				status_traffic_blink_horizontal = init_horizontal;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <fsm_system_run+0x284>)
 80007e0:	2213      	movs	r2, #19
 80007e2:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <fsm_system_run+0x288>)
 80007e6:	2217      	movs	r2, #23
 80007e8:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <fsm_system_run+0x238>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
			}
			break;
 80007f0:	e005      	b.n	80007fe <fsm_system_run+0x232>
			break;
 80007f2:	bf00      	nop
 80007f4:	e004      	b.n	8000800 <fsm_system_run+0x234>
			break;
 80007f6:	bf00      	nop
 80007f8:	e002      	b.n	8000800 <fsm_system_run+0x234>
			break;
 80007fa:	bf00      	nop
 80007fc:	e000      	b.n	8000800 <fsm_system_run+0x234>
			break;
 80007fe:	bf00      	nop
	}
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000b4 	.word	0x200000b4
 8000808:	20000044 	.word	0x20000044
 800080c:	20000048 	.word	0x20000048
 8000810:	20000034 	.word	0x20000034
 8000814:	20000038 	.word	0x20000038
 8000818:	2000004c 	.word	0x2000004c
 800081c:	2000006c 	.word	0x2000006c
 8000820:	66666667 	.word	0x66666667
 8000824:	20000130 	.word	0x20000130
 8000828:	20000058 	.word	0x20000058
 800082c:	20000078 	.word	0x20000078
 8000830:	20000054 	.word	0x20000054
 8000834:	20000068 	.word	0x20000068
 8000838:	20000060 	.word	0x20000060
 800083c:	20000074 	.word	0x20000074
 8000840:	20000050 	.word	0x20000050
 8000844:	20000064 	.word	0x20000064
 8000848:	2000005c 	.word	0x2000005c
 800084c:	20000070 	.word	0x20000070
 8000850:	2000003c 	.word	0x2000003c
 8000854:	20000040 	.word	0x20000040

08000858 <fsm_traffic_blink_horizontal_run>:
#include "control_7SEG.h"

int status_traffic_blink_horizontal = init_horizontal;
int status_traffic_blink_vertical = init_vertical;

void fsm_traffic_blink_horizontal_run(){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_horizontal){
 800085c:	4b85      	ldr	r3, [pc, #532]	; (8000a74 <fsm_traffic_blink_horizontal_run+0x21c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3b13      	subs	r3, #19
 8000862:	2b03      	cmp	r3, #3
 8000864:	f200 80fd 	bhi.w	8000a62 <fsm_traffic_blink_horizontal_run+0x20a>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <fsm_traffic_blink_horizontal_run+0x18>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	08000881 	.word	0x08000881
 8000874:	080008ab 	.word	0x080008ab
 8000878:	0800093f 	.word	0x0800093f
 800087c:	080009d1 	.word	0x080009d1
		case init_horizontal:
			status_traffic_blink_horizontal = red_horizontal;
 8000880:	4b7c      	ldr	r3, [pc, #496]	; (8000a74 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000882:	2214      	movs	r2, #20
 8000884:	601a      	str	r2, [r3, #0]
			traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000886:	4b7c      	ldr	r3, [pc, #496]	; (8000a78 <fsm_traffic_blink_horizontal_run+0x220>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	4a7a      	ldr	r2, [pc, #488]	; (8000a7c <fsm_traffic_blink_horizontal_run+0x224>)
 8000894:	6013      	str	r3, [r2, #0]
			setTimer1(traffic_buffer_horizontal[0]);
 8000896:	4b79      	ldr	r3, [pc, #484]	; (8000a7c <fsm_traffic_blink_horizontal_run+0x224>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fc28 	bl	80010f0 <setTimer1>
			setTimer3(1000);
 80008a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a4:	f000 fc58 	bl	8001158 <setTimer3>
			break;
 80008a8:	e0e2      	b.n	8000a70 <fsm_traffic_blink_horizontal_run+0x218>
		case red_horizontal:
			setRed_horizontal();
 80008aa:	f000 fe67 	bl	800157c <setRed_horizontal>
			_7SEG_buffer_horizontal[0] = time_red_horizontal_temp/10;
 80008ae:	4b74      	ldr	r3, [pc, #464]	; (8000a80 <fsm_traffic_blink_horizontal_run+0x228>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a74      	ldr	r2, [pc, #464]	; (8000a84 <fsm_traffic_blink_horizontal_run+0x22c>)
 80008b4:	fb82 1203 	smull	r1, r2, r2, r3
 80008b8:	1092      	asrs	r2, r2, #2
 80008ba:	17db      	asrs	r3, r3, #31
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	4a72      	ldr	r2, [pc, #456]	; (8000a88 <fsm_traffic_blink_horizontal_run+0x230>)
 80008c0:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_red_horizontal_temp%10;
 80008c2:	4b6f      	ldr	r3, [pc, #444]	; (8000a80 <fsm_traffic_blink_horizontal_run+0x228>)
 80008c4:	6819      	ldr	r1, [r3, #0]
 80008c6:	4b6f      	ldr	r3, [pc, #444]	; (8000a84 <fsm_traffic_blink_horizontal_run+0x22c>)
 80008c8:	fb83 2301 	smull	r2, r3, r3, r1
 80008cc:	109a      	asrs	r2, r3, #2
 80008ce:	17cb      	asrs	r3, r1, #31
 80008d0:	1ad2      	subs	r2, r2, r3
 80008d2:	4613      	mov	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4413      	add	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	1aca      	subs	r2, r1, r3
 80008dc:	4b6a      	ldr	r3, [pc, #424]	; (8000a88 <fsm_traffic_blink_horizontal_run+0x230>)
 80008de:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 80008e0:	4b6a      	ldr	r3, [pc, #424]	; (8000a8c <fsm_traffic_blink_horizontal_run+0x234>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d110      	bne.n	800090a <fsm_traffic_blink_horizontal_run+0xb2>
				time_red_horizontal_temp--;
 80008e8:	4b65      	ldr	r3, [pc, #404]	; (8000a80 <fsm_traffic_blink_horizontal_run+0x228>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4a64      	ldr	r2, [pc, #400]	; (8000a80 <fsm_traffic_blink_horizontal_run+0x228>)
 80008f0:	6013      	str	r3, [r2, #0]
				if(time_red_horizontal_temp == 0){
 80008f2:	4b63      	ldr	r3, [pc, #396]	; (8000a80 <fsm_traffic_blink_horizontal_run+0x228>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d103      	bne.n	8000902 <fsm_traffic_blink_horizontal_run+0xaa>
					time_red_horizontal_temp = time_red_horizontal;
 80008fa:	4b5f      	ldr	r3, [pc, #380]	; (8000a78 <fsm_traffic_blink_horizontal_run+0x220>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a60      	ldr	r2, [pc, #384]	; (8000a80 <fsm_traffic_blink_horizontal_run+0x228>)
 8000900:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000906:	f000 fc27 	bl	8001158 <setTimer3>
			}

			if(timer1_flag == 1){
 800090a:	4b61      	ldr	r3, [pc, #388]	; (8000a90 <fsm_traffic_blink_horizontal_run+0x238>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	f040 80a9 	bne.w	8000a66 <fsm_traffic_blink_horizontal_run+0x20e>
				status_traffic_blink_horizontal = green_horizontal;
 8000914:	4b57      	ldr	r3, [pc, #348]	; (8000a74 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000916:	2215      	movs	r2, #21
 8000918:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[1] = time_green_horizontal*1000;
 800091a:	4b5e      	ldr	r3, [pc, #376]	; (8000a94 <fsm_traffic_blink_horizontal_run+0x23c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000922:	fb02 f303 	mul.w	r3, r2, r3
 8000926:	4a55      	ldr	r2, [pc, #340]	; (8000a7c <fsm_traffic_blink_horizontal_run+0x224>)
 8000928:	6053      	str	r3, [r2, #4]
				setTimer1(traffic_buffer_horizontal[1]);
 800092a:	4b54      	ldr	r3, [pc, #336]	; (8000a7c <fsm_traffic_blink_horizontal_run+0x224>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fbde 	bl	80010f0 <setTimer1>
				setTimer3(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000938:	f000 fc0e 	bl	8001158 <setTimer3>
			}
			break;
 800093c:	e093      	b.n	8000a66 <fsm_traffic_blink_horizontal_run+0x20e>
		case green_horizontal:
			setGreen_horizontal();
 800093e:	f000 fe33 	bl	80015a8 <setGreen_horizontal>

			_7SEG_buffer_horizontal[0] = time_green_horizontal_temp/10;
 8000942:	4b55      	ldr	r3, [pc, #340]	; (8000a98 <fsm_traffic_blink_horizontal_run+0x240>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a4f      	ldr	r2, [pc, #316]	; (8000a84 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000948:	fb82 1203 	smull	r1, r2, r2, r3
 800094c:	1092      	asrs	r2, r2, #2
 800094e:	17db      	asrs	r3, r3, #31
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	4a4d      	ldr	r2, [pc, #308]	; (8000a88 <fsm_traffic_blink_horizontal_run+0x230>)
 8000954:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_green_horizontal_temp%10;
 8000956:	4b50      	ldr	r3, [pc, #320]	; (8000a98 <fsm_traffic_blink_horizontal_run+0x240>)
 8000958:	6819      	ldr	r1, [r3, #0]
 800095a:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <fsm_traffic_blink_horizontal_run+0x22c>)
 800095c:	fb83 2301 	smull	r2, r3, r3, r1
 8000960:	109a      	asrs	r2, r3, #2
 8000962:	17cb      	asrs	r3, r1, #31
 8000964:	1ad2      	subs	r2, r2, r3
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	1aca      	subs	r2, r1, r3
 8000970:	4b45      	ldr	r3, [pc, #276]	; (8000a88 <fsm_traffic_blink_horizontal_run+0x230>)
 8000972:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000974:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <fsm_traffic_blink_horizontal_run+0x234>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d110      	bne.n	800099e <fsm_traffic_blink_horizontal_run+0x146>
				time_green_horizontal_temp--;
 800097c:	4b46      	ldr	r3, [pc, #280]	; (8000a98 <fsm_traffic_blink_horizontal_run+0x240>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3b01      	subs	r3, #1
 8000982:	4a45      	ldr	r2, [pc, #276]	; (8000a98 <fsm_traffic_blink_horizontal_run+0x240>)
 8000984:	6013      	str	r3, [r2, #0]
				if(time_green_horizontal_temp == 0){
 8000986:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <fsm_traffic_blink_horizontal_run+0x240>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d103      	bne.n	8000996 <fsm_traffic_blink_horizontal_run+0x13e>
					time_green_horizontal_temp = time_green_horizontal;
 800098e:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a41      	ldr	r2, [pc, #260]	; (8000a98 <fsm_traffic_blink_horizontal_run+0x240>)
 8000994:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099a:	f000 fbdd 	bl	8001158 <setTimer3>
			}

			if(timer1_flag == 1){
 800099e:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <fsm_traffic_blink_horizontal_run+0x238>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d161      	bne.n	8000a6a <fsm_traffic_blink_horizontal_run+0x212>
				status_traffic_blink_horizontal = yellow_horizontal;
 80009a6:	4b33      	ldr	r3, [pc, #204]	; (8000a74 <fsm_traffic_blink_horizontal_run+0x21c>)
 80009a8:	2216      	movs	r2, #22
 80009aa:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[2] = time_yellow_horizontal*1000;
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <fsm_traffic_blink_horizontal_run+0x244>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b4:	fb02 f303 	mul.w	r3, r2, r3
 80009b8:	4a30      	ldr	r2, [pc, #192]	; (8000a7c <fsm_traffic_blink_horizontal_run+0x224>)
 80009ba:	6093      	str	r3, [r2, #8]
				setTimer1(traffic_buffer_horizontal[2]);
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <fsm_traffic_blink_horizontal_run+0x224>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fb95 	bl	80010f0 <setTimer1>
				setTimer3(1000);
 80009c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ca:	f000 fbc5 	bl	8001158 <setTimer3>
			}
			break;
 80009ce:	e04c      	b.n	8000a6a <fsm_traffic_blink_horizontal_run+0x212>
		case yellow_horizontal:
			setYellow_horizontal();
 80009d0:	f000 fe00 	bl	80015d4 <setYellow_horizontal>

			_7SEG_buffer_horizontal[0] = time_yellow_horizontal_temp/10;
 80009d4:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <fsm_traffic_blink_horizontal_run+0x248>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a2a      	ldr	r2, [pc, #168]	; (8000a84 <fsm_traffic_blink_horizontal_run+0x22c>)
 80009da:	fb82 1203 	smull	r1, r2, r2, r3
 80009de:	1092      	asrs	r2, r2, #2
 80009e0:	17db      	asrs	r3, r3, #31
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	4a28      	ldr	r2, [pc, #160]	; (8000a88 <fsm_traffic_blink_horizontal_run+0x230>)
 80009e6:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_yellow_horizontal_temp%10;
 80009e8:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <fsm_traffic_blink_horizontal_run+0x248>)
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <fsm_traffic_blink_horizontal_run+0x22c>)
 80009ee:	fb83 2301 	smull	r2, r3, r3, r1
 80009f2:	109a      	asrs	r2, r3, #2
 80009f4:	17cb      	asrs	r3, r1, #31
 80009f6:	1ad2      	subs	r2, r2, r3
 80009f8:	4613      	mov	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	1aca      	subs	r2, r1, r3
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <fsm_traffic_blink_horizontal_run+0x230>)
 8000a04:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <fsm_traffic_blink_horizontal_run+0x234>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d110      	bne.n	8000a30 <fsm_traffic_blink_horizontal_run+0x1d8>
				time_yellow_horizontal_temp--;
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <fsm_traffic_blink_horizontal_run+0x248>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <fsm_traffic_blink_horizontal_run+0x248>)
 8000a16:	6013      	str	r3, [r2, #0]
				if(time_yellow_horizontal_temp == 0){
 8000a18:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <fsm_traffic_blink_horizontal_run+0x248>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d103      	bne.n	8000a28 <fsm_traffic_blink_horizontal_run+0x1d0>
					time_yellow_horizontal_temp = time_yellow_horizontal;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <fsm_traffic_blink_horizontal_run+0x244>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <fsm_traffic_blink_horizontal_run+0x248>)
 8000a26:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000a28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2c:	f000 fb94 	bl	8001158 <setTimer3>
			}

			if(timer1_flag == 1){
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <fsm_traffic_blink_horizontal_run+0x238>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d11a      	bne.n	8000a6e <fsm_traffic_blink_horizontal_run+0x216>
				status_traffic_blink_horizontal = red_horizontal;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000a3a:	2214      	movs	r2, #20
 8000a3c:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <fsm_traffic_blink_horizontal_run+0x220>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a46:	fb02 f303 	mul.w	r3, r2, r3
 8000a4a:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <fsm_traffic_blink_horizontal_run+0x224>)
 8000a4c:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_horizontal[0]);
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <fsm_traffic_blink_horizontal_run+0x224>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fb4c 	bl	80010f0 <setTimer1>
				setTimer3(1000);
 8000a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5c:	f000 fb7c 	bl	8001158 <setTimer3>
			}
			break;
 8000a60:	e005      	b.n	8000a6e <fsm_traffic_blink_horizontal_run+0x216>
		default:
			break;
 8000a62:	bf00      	nop
 8000a64:	e004      	b.n	8000a70 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000a66:	bf00      	nop
 8000a68:	e002      	b.n	8000a70 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000a6a:	bf00      	nop
 8000a6c:	e000      	b.n	8000a70 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000a6e:	bf00      	nop
	}
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000003c 	.word	0x2000003c
 8000a78:	2000004c 	.word	0x2000004c
 8000a7c:	20000110 	.word	0x20000110
 8000a80:	20000058 	.word	0x20000058
 8000a84:	66666667 	.word	0x66666667
 8000a88:	20000128 	.word	0x20000128
 8000a8c:	200000d0 	.word	0x200000d0
 8000a90:	200000c0 	.word	0x200000c0
 8000a94:	20000050 	.word	0x20000050
 8000a98:	2000005c 	.word	0x2000005c
 8000a9c:	20000054 	.word	0x20000054
 8000aa0:	20000060 	.word	0x20000060

08000aa4 <fsm_traffic_blink_vertical_run>:

void fsm_traffic_blink_vertical_run(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_vertical){
 8000aa8:	4b85      	ldr	r3, [pc, #532]	; (8000cc0 <fsm_traffic_blink_vertical_run+0x21c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3b17      	subs	r3, #23
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	f200 80fd 	bhi.w	8000cae <fsm_traffic_blink_vertical_run+0x20a>
 8000ab4:	a201      	add	r2, pc, #4	; (adr r2, 8000abc <fsm_traffic_blink_vertical_run+0x18>)
 8000ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aba:	bf00      	nop
 8000abc:	08000acd 	.word	0x08000acd
 8000ac0:	08000c1d 	.word	0x08000c1d
 8000ac4:	08000af7 	.word	0x08000af7
 8000ac8:	08000b8b 	.word	0x08000b8b
		case init_vertical:
			status_traffic_blink_vertical = green_vertical;
 8000acc:	4b7c      	ldr	r3, [pc, #496]	; (8000cc0 <fsm_traffic_blink_vertical_run+0x21c>)
 8000ace:	2219      	movs	r2, #25
 8000ad0:	601a      	str	r2, [r3, #0]
			traffic_buffer_vertical[0] = time_green_vertical*1000;
 8000ad2:	4b7c      	ldr	r3, [pc, #496]	; (8000cc4 <fsm_traffic_blink_vertical_run+0x220>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ada:	fb02 f303 	mul.w	r3, r2, r3
 8000ade:	4a7a      	ldr	r2, [pc, #488]	; (8000cc8 <fsm_traffic_blink_vertical_run+0x224>)
 8000ae0:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_vertical[0]);
 8000ae2:	4b79      	ldr	r3, [pc, #484]	; (8000cc8 <fsm_traffic_blink_vertical_run+0x224>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fb1c 	bl	8001124 <setTimer2>
			setTimer5(1000);
 8000aec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af0:	f000 fb66 	bl	80011c0 <setTimer5>
			break;
 8000af4:	e0e2      	b.n	8000cbc <fsm_traffic_blink_vertical_run+0x218>
		case green_vertical:
			setGreen_vertical();
 8000af6:	f000 fd9b 	bl	8001630 <setGreen_vertical>

			_7SEG_buffer_vertical[0] = time_green_vertical_temp/10;
 8000afa:	4b74      	ldr	r3, [pc, #464]	; (8000ccc <fsm_traffic_blink_vertical_run+0x228>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a74      	ldr	r2, [pc, #464]	; (8000cd0 <fsm_traffic_blink_vertical_run+0x22c>)
 8000b00:	fb82 1203 	smull	r1, r2, r2, r3
 8000b04:	1092      	asrs	r2, r2, #2
 8000b06:	17db      	asrs	r3, r3, #31
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	4a72      	ldr	r2, [pc, #456]	; (8000cd4 <fsm_traffic_blink_vertical_run+0x230>)
 8000b0c:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical_temp%10;
 8000b0e:	4b6f      	ldr	r3, [pc, #444]	; (8000ccc <fsm_traffic_blink_vertical_run+0x228>)
 8000b10:	6819      	ldr	r1, [r3, #0]
 8000b12:	4b6f      	ldr	r3, [pc, #444]	; (8000cd0 <fsm_traffic_blink_vertical_run+0x22c>)
 8000b14:	fb83 2301 	smull	r2, r3, r3, r1
 8000b18:	109a      	asrs	r2, r3, #2
 8000b1a:	17cb      	asrs	r3, r1, #31
 8000b1c:	1ad2      	subs	r2, r2, r3
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	1aca      	subs	r2, r1, r3
 8000b28:	4b6a      	ldr	r3, [pc, #424]	; (8000cd4 <fsm_traffic_blink_vertical_run+0x230>)
 8000b2a:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000b2c:	4b6a      	ldr	r3, [pc, #424]	; (8000cd8 <fsm_traffic_blink_vertical_run+0x234>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d110      	bne.n	8000b56 <fsm_traffic_blink_vertical_run+0xb2>
				time_green_vertical_temp--;
 8000b34:	4b65      	ldr	r3, [pc, #404]	; (8000ccc <fsm_traffic_blink_vertical_run+0x228>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a64      	ldr	r2, [pc, #400]	; (8000ccc <fsm_traffic_blink_vertical_run+0x228>)
 8000b3c:	6013      	str	r3, [r2, #0]
				if(time_green_vertical_temp == 0){
 8000b3e:	4b63      	ldr	r3, [pc, #396]	; (8000ccc <fsm_traffic_blink_vertical_run+0x228>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <fsm_traffic_blink_vertical_run+0xaa>
					time_green_vertical_temp = time_green_vertical;
 8000b46:	4b5f      	ldr	r3, [pc, #380]	; (8000cc4 <fsm_traffic_blink_vertical_run+0x220>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a60      	ldr	r2, [pc, #384]	; (8000ccc <fsm_traffic_blink_vertical_run+0x228>)
 8000b4c:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b52:	f000 fb35 	bl	80011c0 <setTimer5>
			}

			if(timer2_flag == 1){
 8000b56:	4b61      	ldr	r3, [pc, #388]	; (8000cdc <fsm_traffic_blink_vertical_run+0x238>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	f040 80a9 	bne.w	8000cb2 <fsm_traffic_blink_vertical_run+0x20e>
				status_traffic_blink_vertical = yellow_vertical;
 8000b60:	4b57      	ldr	r3, [pc, #348]	; (8000cc0 <fsm_traffic_blink_vertical_run+0x21c>)
 8000b62:	221a      	movs	r2, #26
 8000b64:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[1] = time_yellow_vertical*1000;
 8000b66:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <fsm_traffic_blink_vertical_run+0x23c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b6e:	fb02 f303 	mul.w	r3, r2, r3
 8000b72:	4a55      	ldr	r2, [pc, #340]	; (8000cc8 <fsm_traffic_blink_vertical_run+0x224>)
 8000b74:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_vertical[1]);
 8000b76:	4b54      	ldr	r3, [pc, #336]	; (8000cc8 <fsm_traffic_blink_vertical_run+0x224>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fad2 	bl	8001124 <setTimer2>
				setTimer5(1000);
 8000b80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b84:	f000 fb1c 	bl	80011c0 <setTimer5>
			}
			break;
 8000b88:	e093      	b.n	8000cb2 <fsm_traffic_blink_vertical_run+0x20e>
		case yellow_vertical:
			setYellow_vertical();
 8000b8a:	f000 fd69 	bl	8001660 <setYellow_vertical>

			_7SEG_buffer_vertical[0] = time_yellow_vertical_temp/10;
 8000b8e:	4b55      	ldr	r3, [pc, #340]	; (8000ce4 <fsm_traffic_blink_vertical_run+0x240>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a4f      	ldr	r2, [pc, #316]	; (8000cd0 <fsm_traffic_blink_vertical_run+0x22c>)
 8000b94:	fb82 1203 	smull	r1, r2, r2, r3
 8000b98:	1092      	asrs	r2, r2, #2
 8000b9a:	17db      	asrs	r3, r3, #31
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	4a4d      	ldr	r2, [pc, #308]	; (8000cd4 <fsm_traffic_blink_vertical_run+0x230>)
 8000ba0:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical_temp%10;
 8000ba2:	4b50      	ldr	r3, [pc, #320]	; (8000ce4 <fsm_traffic_blink_vertical_run+0x240>)
 8000ba4:	6819      	ldr	r1, [r3, #0]
 8000ba6:	4b4a      	ldr	r3, [pc, #296]	; (8000cd0 <fsm_traffic_blink_vertical_run+0x22c>)
 8000ba8:	fb83 2301 	smull	r2, r3, r3, r1
 8000bac:	109a      	asrs	r2, r3, #2
 8000bae:	17cb      	asrs	r3, r1, #31
 8000bb0:	1ad2      	subs	r2, r2, r3
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	1aca      	subs	r2, r1, r3
 8000bbc:	4b45      	ldr	r3, [pc, #276]	; (8000cd4 <fsm_traffic_blink_vertical_run+0x230>)
 8000bbe:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000bc0:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <fsm_traffic_blink_vertical_run+0x234>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d110      	bne.n	8000bea <fsm_traffic_blink_vertical_run+0x146>
				time_yellow_vertical_temp--;
 8000bc8:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <fsm_traffic_blink_vertical_run+0x240>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	4a45      	ldr	r2, [pc, #276]	; (8000ce4 <fsm_traffic_blink_vertical_run+0x240>)
 8000bd0:	6013      	str	r3, [r2, #0]
				if(time_yellow_vertical_temp == 0){
 8000bd2:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <fsm_traffic_blink_vertical_run+0x240>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d103      	bne.n	8000be2 <fsm_traffic_blink_vertical_run+0x13e>
					time_yellow_vertical_temp = time_yellow_vertical;
 8000bda:	4b41      	ldr	r3, [pc, #260]	; (8000ce0 <fsm_traffic_blink_vertical_run+0x23c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a41      	ldr	r2, [pc, #260]	; (8000ce4 <fsm_traffic_blink_vertical_run+0x240>)
 8000be0:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be6:	f000 faeb 	bl	80011c0 <setTimer5>
			}

			if(timer2_flag == 1){
 8000bea:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <fsm_traffic_blink_vertical_run+0x238>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d161      	bne.n	8000cb6 <fsm_traffic_blink_vertical_run+0x212>
				status_traffic_blink_vertical = red_vertical;
 8000bf2:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <fsm_traffic_blink_vertical_run+0x21c>)
 8000bf4:	2218      	movs	r2, #24
 8000bf6:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[2] = time_red_vertical*1000;
 8000bf8:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <fsm_traffic_blink_vertical_run+0x244>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c00:	fb02 f303 	mul.w	r3, r2, r3
 8000c04:	4a30      	ldr	r2, [pc, #192]	; (8000cc8 <fsm_traffic_blink_vertical_run+0x224>)
 8000c06:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_vertical[2]);
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <fsm_traffic_blink_vertical_run+0x224>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fa89 	bl	8001124 <setTimer2>
				setTimer5(1000);
 8000c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c16:	f000 fad3 	bl	80011c0 <setTimer5>
			}
			break;
 8000c1a:	e04c      	b.n	8000cb6 <fsm_traffic_blink_vertical_run+0x212>
		case red_vertical:
			setRed_vertical();
 8000c1c:	f000 fcf0 	bl	8001600 <setRed_vertical>

			_7SEG_buffer_vertical[0] = time_red_vertical_temp/10;
 8000c20:	4b32      	ldr	r3, [pc, #200]	; (8000cec <fsm_traffic_blink_vertical_run+0x248>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a2a      	ldr	r2, [pc, #168]	; (8000cd0 <fsm_traffic_blink_vertical_run+0x22c>)
 8000c26:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2a:	1092      	asrs	r2, r2, #2
 8000c2c:	17db      	asrs	r3, r3, #31
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <fsm_traffic_blink_vertical_run+0x230>)
 8000c32:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical_temp%10;
 8000c34:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <fsm_traffic_blink_vertical_run+0x248>)
 8000c36:	6819      	ldr	r1, [r3, #0]
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <fsm_traffic_blink_vertical_run+0x22c>)
 8000c3a:	fb83 2301 	smull	r2, r3, r3, r1
 8000c3e:	109a      	asrs	r2, r3, #2
 8000c40:	17cb      	asrs	r3, r1, #31
 8000c42:	1ad2      	subs	r2, r2, r3
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	1aca      	subs	r2, r1, r3
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <fsm_traffic_blink_vertical_run+0x230>)
 8000c50:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <fsm_traffic_blink_vertical_run+0x234>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d110      	bne.n	8000c7c <fsm_traffic_blink_vertical_run+0x1d8>
				time_red_vertical_temp--;
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <fsm_traffic_blink_vertical_run+0x248>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	4a22      	ldr	r2, [pc, #136]	; (8000cec <fsm_traffic_blink_vertical_run+0x248>)
 8000c62:	6013      	str	r3, [r2, #0]
				if(time_red_vertical_temp == 0){
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <fsm_traffic_blink_vertical_run+0x248>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <fsm_traffic_blink_vertical_run+0x1d0>
					time_red_vertical_temp = time_red_vertical;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <fsm_traffic_blink_vertical_run+0x244>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <fsm_traffic_blink_vertical_run+0x248>)
 8000c72:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c78:	f000 faa2 	bl	80011c0 <setTimer5>
			}

			if(timer2_flag == 1){
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <fsm_traffic_blink_vertical_run+0x238>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d11a      	bne.n	8000cba <fsm_traffic_blink_vertical_run+0x216>
				status_traffic_blink_vertical = green_vertical;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <fsm_traffic_blink_vertical_run+0x21c>)
 8000c86:	2219      	movs	r2, #25
 8000c88:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[0] = time_green_vertical*1000;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <fsm_traffic_blink_vertical_run+0x220>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <fsm_traffic_blink_vertical_run+0x224>)
 8000c98:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_vertical[0]);
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <fsm_traffic_blink_vertical_run+0x224>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fa40 	bl	8001124 <setTimer2>
				setTimer5(1000);
 8000ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca8:	f000 fa8a 	bl	80011c0 <setTimer5>
			}
			break;
 8000cac:	e005      	b.n	8000cba <fsm_traffic_blink_vertical_run+0x216>
		default:
			break;
 8000cae:	bf00      	nop
 8000cb0:	e004      	b.n	8000cbc <fsm_traffic_blink_vertical_run+0x218>
			break;
 8000cb2:	bf00      	nop
 8000cb4:	e002      	b.n	8000cbc <fsm_traffic_blink_vertical_run+0x218>
			break;
 8000cb6:	bf00      	nop
 8000cb8:	e000      	b.n	8000cbc <fsm_traffic_blink_vertical_run+0x218>
			break;
 8000cba:	bf00      	nop
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000040 	.word	0x20000040
 8000cc4:	20000064 	.word	0x20000064
 8000cc8:	2000011c 	.word	0x2000011c
 8000ccc:	20000070 	.word	0x20000070
 8000cd0:	66666667 	.word	0x66666667
 8000cd4:	20000130 	.word	0x20000130
 8000cd8:	200000e0 	.word	0x200000e0
 8000cdc:	200000c8 	.word	0x200000c8
 8000ce0:	20000068 	.word	0x20000068
 8000ce4:	20000074 	.word	0x20000074
 8000ce8:	2000006c 	.word	0x2000006c
 8000cec:	20000078 	.word	0x20000078

08000cf0 <fsm_traffic_horizontal_run>:
#include "software_timer.h"
#include "traffic_light.h"

int status_traffic_horizontal = display_traffic_horizontal;

void fsm_traffic_horizontal_run(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	switch(status_traffic_horizontal){
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <fsm_traffic_horizontal_run+0x8c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3b05      	subs	r3, #5
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d834      	bhi.n	8000d68 <fsm_traffic_horizontal_run+0x78>
 8000cfe:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <fsm_traffic_horizontal_run+0x14>)
 8000d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000d1b 	.word	0x08000d1b
 8000d0c:	08000d4f 	.word	0x08000d4f
 8000d10:	08000d35 	.word	0x08000d35
		case display_traffic_horizontal:
			fsm_traffic_blink_horizontal_run();
 8000d14:	f7ff fda0 	bl	8000858 <fsm_traffic_blink_horizontal_run>
			break;
 8000d18:	e02d      	b.n	8000d76 <fsm_traffic_horizontal_run+0x86>
		case modifying_led_red_horizontal:
			offGreenYellow_horizontal();
 8000d1a:	f000 fd05 	bl	8001728 <offGreenYellow_horizontal>
			if(timer8_flag == 1){
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <fsm_traffic_horizontal_run+0x90>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d122      	bne.n	8000d6c <fsm_traffic_horizontal_run+0x7c>
				toggleRed_horizontal();
 8000d26:	f000 fcbd 	bl	80016a4 <toggleRed_horizontal>
				setTimer8(500);
 8000d2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2e:	f000 fa95 	bl	800125c <setTimer8>
			}
			break;
 8000d32:	e01b      	b.n	8000d6c <fsm_traffic_horizontal_run+0x7c>
		case modifying_led_yellow_horizontal:
			offGreenRed_horizontal();
 8000d34:	f000 fd08 	bl	8001748 <offGreenRed_horizontal>
			if(timer8_flag == 1){
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <fsm_traffic_horizontal_run+0x90>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d117      	bne.n	8000d70 <fsm_traffic_horizontal_run+0x80>
				toggleYellow_horizontal();
 8000d40:	f000 fcc4 	bl	80016cc <toggleYellow_horizontal>
				setTimer8(500);
 8000d44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d48:	f000 fa88 	bl	800125c <setTimer8>
			}
			break;
 8000d4c:	e010      	b.n	8000d70 <fsm_traffic_horizontal_run+0x80>
		case modifying_led_green_horizontal:
			offRedYellow_horizontal();
 8000d4e:	f000 fd0b 	bl	8001768 <offRedYellow_horizontal>
			if(timer8_flag == 1){
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <fsm_traffic_horizontal_run+0x90>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d10c      	bne.n	8000d74 <fsm_traffic_horizontal_run+0x84>
				toggleGreen_horizontal();
 8000d5a:	f000 fcad 	bl	80016b8 <toggleGreen_horizontal>
				setTimer8(500);
 8000d5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d62:	f000 fa7b 	bl	800125c <setTimer8>
			}
			break;
 8000d66:	e005      	b.n	8000d74 <fsm_traffic_horizontal_run+0x84>
		default:
			break;
 8000d68:	bf00      	nop
 8000d6a:	e004      	b.n	8000d76 <fsm_traffic_horizontal_run+0x86>
			break;
 8000d6c:	bf00      	nop
 8000d6e:	e002      	b.n	8000d76 <fsm_traffic_horizontal_run+0x86>
			break;
 8000d70:	bf00      	nop
 8000d72:	e000      	b.n	8000d76 <fsm_traffic_horizontal_run+0x86>
			break;
 8000d74:	bf00      	nop
	}
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000044 	.word	0x20000044
 8000d80:	200000f8 	.word	0x200000f8

08000d84 <fsm_traffic_vertical_run>:
#include "traffic_light.h"
#include "fsm_traffic_blink.h"

int status_traffic_vertical = display_traffic_vertical;

void fsm_traffic_vertical_run(){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	switch(status_traffic_vertical){
 8000d88:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <fsm_traffic_vertical_run+0xdc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3b09      	subs	r3, #9
 8000d8e:	2b17      	cmp	r3, #23
 8000d90:	d85c      	bhi.n	8000e4c <fsm_traffic_vertical_run+0xc8>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <fsm_traffic_vertical_run+0x14>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000df9 	.word	0x08000df9
 8000d9c:	08000e4d 	.word	0x08000e4d
 8000da0:	08000e4d 	.word	0x08000e4d
 8000da4:	08000e4d 	.word	0x08000e4d
 8000da8:	08000e4d 	.word	0x08000e4d
 8000dac:	08000e4d 	.word	0x08000e4d
 8000db0:	08000e4d 	.word	0x08000e4d
 8000db4:	08000e4d 	.word	0x08000e4d
 8000db8:	08000e4d 	.word	0x08000e4d
 8000dbc:	08000e4d 	.word	0x08000e4d
 8000dc0:	08000e4d 	.word	0x08000e4d
 8000dc4:	08000e4d 	.word	0x08000e4d
 8000dc8:	08000e4d 	.word	0x08000e4d
 8000dcc:	08000e4d 	.word	0x08000e4d
 8000dd0:	08000e4d 	.word	0x08000e4d
 8000dd4:	08000e4d 	.word	0x08000e4d
 8000dd8:	08000e4d 	.word	0x08000e4d
 8000ddc:	08000e4d 	.word	0x08000e4d
 8000de0:	08000e4d 	.word	0x08000e4d
 8000de4:	08000e4d 	.word	0x08000e4d
 8000de8:	08000e4d 	.word	0x08000e4d
 8000dec:	08000dff 	.word	0x08000dff
 8000df0:	08000e33 	.word	0x08000e33
 8000df4:	08000e19 	.word	0x08000e19
		case display_traffic_vertical:
			fsm_traffic_blink_vertical_run();
 8000df8:	f7ff fe54 	bl	8000aa4 <fsm_traffic_blink_vertical_run>
			break;
 8000dfc:	e02d      	b.n	8000e5a <fsm_traffic_vertical_run+0xd6>
		case modifying_led_red_vertical:
			offGreenYellow_vertical();
 8000dfe:	f000 fcc3 	bl	8001788 <offGreenYellow_vertical>
			if(timer7_flag == 1){
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <fsm_traffic_vertical_run+0xe0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d122      	bne.n	8000e50 <fsm_traffic_vertical_run+0xcc>
				toggleRed_vertical();
 8000e0a:	f000 fc69 	bl	80016e0 <toggleRed_vertical>
				setTimer7(500);
 8000e0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e12:	f000 fa09 	bl	8001228 <setTimer7>
			}
			break;
 8000e16:	e01b      	b.n	8000e50 <fsm_traffic_vertical_run+0xcc>
		case modifying_led_yellow_vertical:
			offGreenRed_vertical();
 8000e18:	f000 fcc8 	bl	80017ac <offGreenRed_vertical>
			if(timer7_flag == 1){
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <fsm_traffic_vertical_run+0xe0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d117      	bne.n	8000e54 <fsm_traffic_vertical_run+0xd0>
				toggleYellow_vertical();
 8000e24:	f000 fc74 	bl	8001710 <toggleYellow_vertical>
				setTimer7(500);
 8000e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e2c:	f000 f9fc 	bl	8001228 <setTimer7>
			}
			break;
 8000e30:	e010      	b.n	8000e54 <fsm_traffic_vertical_run+0xd0>
		case modifying_led_green_vertical:
			offRedYellow_vertical();
 8000e32:	f000 fccd 	bl	80017d0 <offRedYellow_vertical>
			if(timer7_flag == 1){
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <fsm_traffic_vertical_run+0xe0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d10c      	bne.n	8000e58 <fsm_traffic_vertical_run+0xd4>
				toggleGreen_vertical();
 8000e3e:	f000 fc5b 	bl	80016f8 <toggleGreen_vertical>
				setTimer7(500);
 8000e42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e46:	f000 f9ef 	bl	8001228 <setTimer7>
			}
			break;
 8000e4a:	e005      	b.n	8000e58 <fsm_traffic_vertical_run+0xd4>
		default:
			break;
 8000e4c:	bf00      	nop
 8000e4e:	e004      	b.n	8000e5a <fsm_traffic_vertical_run+0xd6>
			break;
 8000e50:	bf00      	nop
 8000e52:	e002      	b.n	8000e5a <fsm_traffic_vertical_run+0xd6>
			break;
 8000e54:	bf00      	nop
 8000e56:	e000      	b.n	8000e5a <fsm_traffic_vertical_run+0xd6>
			break;
 8000e58:	bf00      	nop
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000048 	.word	0x20000048
 8000e64:	200000f0 	.word	0x200000f0

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f001 f846 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f832 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 f8b8 	bl	8000fe8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e78:	f000 f86a 	bl	8000f50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e7c:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <main+0x68>)
 8000e7e:	f001 ff9b 	bl	8002db8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer4(10);
 8000e82:	200a      	movs	r0, #10
 8000e84:	f000 f982 	bl	800118c <setTimer4>
  setTimer6(10);
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f000 f9b3 	bl	80011f4 <setTimer6>
  setTimer7(500);
 8000e8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e92:	f000 f9c9 	bl	8001228 <setTimer7>
  setTimer8(500);
 8000e96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e9a:	f000 f9df 	bl	800125c <setTimer8>
  setTimer10(500);
 8000e9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea2:	f000 f9f5 	bl	8001290 <setTimer10>
  while (1)
  {
	  if(timer10_flag == 1){
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <main+0x6c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d105      	bne.n	8000eba <main+0x52>
		  toggleLedRed();
 8000eae:	f000 fbef 	bl	8001690 <toggleLedRed>
		  setTimer10(500);
 8000eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb6:	f000 f9eb 	bl	8001290 <setTimer10>
	  }

	  fsm_system_run();
 8000eba:	f7ff fb87 	bl	80005cc <fsm_system_run>
	  fsm_7SEG_horizontal_run();
 8000ebe:	f7ff faaf 	bl	8000420 <fsm_7SEG_horizontal_run>
	  fsm_7SEG_vertical_run();
 8000ec2:	f7ff fb41 	bl	8000548 <fsm_7SEG_vertical_run>
	  fsm_traffic_vertical_run();
 8000ec6:	f7ff ff5d 	bl	8000d84 <fsm_traffic_vertical_run>
	  fsm_traffic_horizontal_run();
 8000eca:	f7ff ff11 	bl	8000cf0 <fsm_traffic_horizontal_run>
	  if(timer10_flag == 1){
 8000ece:	e7ea      	b.n	8000ea6 <main+0x3e>
 8000ed0:	20000138 	.word	0x20000138
 8000ed4:	20000108 	.word	0x20000108

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b090      	sub	sp, #64	; 0x40
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0318 	add.w	r3, r7, #24
 8000ee2:	2228      	movs	r2, #40	; 0x28
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fb16 	bl	8003518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efe:	2301      	movs	r3, #1
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f02:	2310      	movs	r3, #16
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fb26 	bl	8002560 <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f1a:	f000 f8e3 	bl	80010e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	230f      	movs	r3, #15
 8000f20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fd92 	bl	8002a60 <HAL_RCC_ClockConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f42:	f000 f8cf 	bl	80010e4 <Error_Handler>
  }
}
 8000f46:	bf00      	nop
 8000f48:	3740      	adds	r7, #64	; 0x40
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_TIM2_Init+0x94>)
 8000f6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_TIM2_Init+0x94>)
 8000f76:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_TIM2_Init+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_TIM2_Init+0x94>)
 8000f84:	2209      	movs	r2, #9
 8000f86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_TIM2_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_TIM2_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f94:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <MX_TIM2_Init+0x94>)
 8000f96:	f001 febf 	bl	8002d18 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa0:	f000 f8a0 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <MX_TIM2_Init+0x94>)
 8000fb2:	f002 f83d 	bl	8003030 <HAL_TIM_ConfigClockSource>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fbc:	f000 f892 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_TIM2_Init+0x94>)
 8000fce:	f002 fa15 	bl	80033fc <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fd8:	f000 f884 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000138 	.word	0x20000138

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <MX_GPIO_Init+0xd4>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a2e      	ldr	r2, [pc, #184]	; (80010bc <MX_GPIO_Init+0xd4>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <MX_GPIO_Init+0xd4>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <MX_GPIO_Init+0xd4>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a28      	ldr	r2, [pc, #160]	; (80010bc <MX_GPIO_Init+0xd4>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <MX_GPIO_Init+0xd4>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MX_GPIO_Init+0xd4>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a22      	ldr	r2, [pc, #136]	; (80010bc <MX_GPIO_Init+0xd4>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <MX_GPIO_Init+0xd4>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8001044:	2200      	movs	r2, #0
 8001046:	f24f 71e8 	movw	r1, #63464	; 0xf7e8
 800104a:	481d      	ldr	r0, [pc, #116]	; (80010c0 <MX_GPIO_Init+0xd8>)
 800104c:	f001 fa57 	bl	80024fe <HAL_GPIO_WritePin>
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|c2_Pin
 8001050:	2200      	movs	r2, #0
 8001052:	f647 717f 	movw	r1, #32639	; 0x7f7f
 8001056:	481b      	ldr	r0, [pc, #108]	; (80010c4 <MX_GPIO_Init+0xdc>)
 8001058:	f001 fa51 	bl	80024fe <HAL_GPIO_WritePin>
                          |d2_Pin|e2_Pin|f2_Pin|g2_Pin
                          |d_Pin|e_Pin|f_Pin|g_Pin
                          |a2_Pin|b2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 800105c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4619      	mov	r1, r3
 8001070:	4815      	ldr	r0, [pc, #84]	; (80010c8 <MX_GPIO_Init+0xe0>)
 8001072:	f001 f8b3 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TEST_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           LED_RED2_Pin LED_YELLOW2_Pin LED_GREEN2_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8001076:	f24f 73e8 	movw	r3, #63464	; 0xf7e8
 800107a:	613b      	str	r3, [r7, #16]
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2302      	movs	r3, #2
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <MX_GPIO_Init+0xd8>)
 8001090:	f001 f8a4 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin c2_Pin
                           d2_Pin e2_Pin f2_Pin g2_Pin
                           d_Pin e_Pin f_Pin g_Pin
                           a2_Pin b2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|c2_Pin
 8001094:	f647 737f 	movw	r3, #32639	; 0x7f7f
 8001098:	613b      	str	r3, [r7, #16]
                          |d2_Pin|e2_Pin|f2_Pin|g2_Pin
                          |d_Pin|e_Pin|f_Pin|g_Pin
                          |a2_Pin|b2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_GPIO_Init+0xdc>)
 80010ae:	f001 f895 	bl	80021dc <HAL_GPIO_Init>

}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40011000 	.word	0x40011000

080010cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	timerRun();
 80010d4:	f000 f8f6 	bl	80012c4 <timerRun>
	getKeyInput();
 80010d8:	f7ff f86e 	bl	80001b8 <getKeyInput>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x8>
	...

080010f0 <setTimer1>:

int timer10_flag = 0;
int timer10_counter = 0;

//timer for update clockbuffer
void setTimer1(int duration){
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <setTimer1+0x28>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001102:	4a06      	ldr	r2, [pc, #24]	; (800111c <setTimer1+0x2c>)
 8001104:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <setTimer1+0x30>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000007c 	.word	0x2000007c
 800111c:	200000c4 	.word	0x200000c4
 8001120:	200000c0 	.word	0x200000c0

08001124 <setTimer2>:

//timer for update 7SEG led
void setTimer2(int duration){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <setTimer2+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	fb92 f3f3 	sdiv	r3, r2, r3
 8001136:	4a06      	ldr	r2, [pc, #24]	; (8001150 <setTimer2+0x2c>)
 8001138:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <setTimer2+0x30>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	2000007c 	.word	0x2000007c
 8001150:	200000cc 	.word	0x200000cc
 8001154:	200000c8 	.word	0x200000c8

08001158 <setTimer3>:

//timer for control LED-RED and DOT-LED
void setTimer3(int duration){
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <setTimer3+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	fb92 f3f3 	sdiv	r3, r2, r3
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <setTimer3+0x2c>)
 800116c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <setTimer3+0x30>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000007c 	.word	0x2000007c
 8001184:	200000d4 	.word	0x200000d4
 8001188:	200000d0 	.word	0x200000d0

0800118c <setTimer4>:

//timer for update led matrix
void setTimer4(int duration){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <setTimer4+0x28>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	fb92 f3f3 	sdiv	r3, r2, r3
 800119e:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <setTimer4+0x2c>)
 80011a0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <setTimer4+0x30>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2000007c 	.word	0x2000007c
 80011b8:	200000dc 	.word	0x200000dc
 80011bc:	200000d8 	.word	0x200000d8

080011c0 <setTimer5>:

//timer for update buffer led matrix
void setTimer5(int duration){
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <setTimer5+0x28>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <setTimer5+0x2c>)
 80011d4:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <setTimer5+0x30>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000007c 	.word	0x2000007c
 80011ec:	200000e4 	.word	0x200000e4
 80011f0:	200000e0 	.word	0x200000e0

080011f4 <setTimer6>:

void setTimer6(int duration){
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <setTimer6+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	fb92 f3f3 	sdiv	r3, r2, r3
 8001206:	4a06      	ldr	r2, [pc, #24]	; (8001220 <setTimer6+0x2c>)
 8001208:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <setTimer6+0x30>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000007c 	.word	0x2000007c
 8001220:	200000ec 	.word	0x200000ec
 8001224:	200000e8 	.word	0x200000e8

08001228 <setTimer7>:

void setTimer7(int duration){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <setTimer7+0x28>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	fb92 f3f3 	sdiv	r3, r2, r3
 800123a:	4a06      	ldr	r2, [pc, #24]	; (8001254 <setTimer7+0x2c>)
 800123c:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <setTimer7+0x30>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	2000007c 	.word	0x2000007c
 8001254:	200000f4 	.word	0x200000f4
 8001258:	200000f0 	.word	0x200000f0

0800125c <setTimer8>:

void setTimer8(int duration){
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <setTimer8+0x28>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	fb92 f3f3 	sdiv	r3, r2, r3
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <setTimer8+0x2c>)
 8001270:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <setTimer8+0x30>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000007c 	.word	0x2000007c
 8001288:	200000fc 	.word	0x200000fc
 800128c:	200000f8 	.word	0x200000f8

08001290 <setTimer10>:
void setTimer9(int duration){
	timer9_counter = duration/TICK;
	timer9_flag = 0;
}

void setTimer10(int duration){
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <setTimer10+0x28>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	fb92 f3f3 	sdiv	r3, r2, r3
 80012a2:	4a06      	ldr	r2, [pc, #24]	; (80012bc <setTimer10+0x2c>)
 80012a4:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <setTimer10+0x30>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	2000007c 	.word	0x2000007c
 80012bc:	2000010c 	.word	0x2000010c
 80012c0:	20000108 	.word	0x20000108

080012c4 <timerRun>:

void timerRun(){
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 80012c8:	4b51      	ldr	r3, [pc, #324]	; (8001410 <timerRun+0x14c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dd04      	ble.n	80012da <timerRun+0x16>
 80012d0:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <timerRun+0x14c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <timerRun+0x14c>)
 80012d8:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 80012da:	4b4d      	ldr	r3, [pc, #308]	; (8001410 <timerRun+0x14c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <timerRun+0x24>
		timer1_flag = 1;
 80012e2:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <timerRun+0x150>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 80012e8:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <timerRun+0x154>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dd04      	ble.n	80012fa <timerRun+0x36>
 80012f0:	4b49      	ldr	r3, [pc, #292]	; (8001418 <timerRun+0x154>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	4a48      	ldr	r2, [pc, #288]	; (8001418 <timerRun+0x154>)
 80012f8:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <timerRun+0x154>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <timerRun+0x44>
		timer2_flag = 1;
 8001302:	4b46      	ldr	r3, [pc, #280]	; (800141c <timerRun+0x158>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 8001308:	4b45      	ldr	r3, [pc, #276]	; (8001420 <timerRun+0x15c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	dd04      	ble.n	800131a <timerRun+0x56>
 8001310:	4b43      	ldr	r3, [pc, #268]	; (8001420 <timerRun+0x15c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	4a42      	ldr	r2, [pc, #264]	; (8001420 <timerRun+0x15c>)
 8001318:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <timerRun+0x15c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <timerRun+0x64>
		timer3_flag = 1;
 8001322:	4b40      	ldr	r3, [pc, #256]	; (8001424 <timerRun+0x160>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 8001328:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <timerRun+0x164>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	dd04      	ble.n	800133a <timerRun+0x76>
 8001330:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <timerRun+0x164>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a3c      	ldr	r2, [pc, #240]	; (8001428 <timerRun+0x164>)
 8001338:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <timerRun+0x164>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <timerRun+0x84>
		timer4_flag = 1;
 8001342:	4b3a      	ldr	r3, [pc, #232]	; (800142c <timerRun+0x168>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 8001348:	4b39      	ldr	r3, [pc, #228]	; (8001430 <timerRun+0x16c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	dd04      	ble.n	800135a <timerRun+0x96>
 8001350:	4b37      	ldr	r3, [pc, #220]	; (8001430 <timerRun+0x16c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	4a36      	ldr	r2, [pc, #216]	; (8001430 <timerRun+0x16c>)
 8001358:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 800135a:	4b35      	ldr	r3, [pc, #212]	; (8001430 <timerRun+0x16c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <timerRun+0xa4>
		timer5_flag = 1;
 8001362:	4b34      	ldr	r3, [pc, #208]	; (8001434 <timerRun+0x170>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0) timer6_counter--;
 8001368:	4b33      	ldr	r3, [pc, #204]	; (8001438 <timerRun+0x174>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dd04      	ble.n	800137a <timerRun+0xb6>
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <timerRun+0x174>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	4a30      	ldr	r2, [pc, #192]	; (8001438 <timerRun+0x174>)
 8001378:	6013      	str	r3, [r2, #0]
	if(timer6_counter == 0){
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <timerRun+0x174>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <timerRun+0xc4>
		timer6_flag = 1;
 8001382:	4b2e      	ldr	r3, [pc, #184]	; (800143c <timerRun+0x178>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0) timer7_counter--;
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <timerRun+0x17c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dd04      	ble.n	800139a <timerRun+0xd6>
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <timerRun+0x17c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3b01      	subs	r3, #1
 8001396:	4a2a      	ldr	r2, [pc, #168]	; (8001440 <timerRun+0x17c>)
 8001398:	6013      	str	r3, [r2, #0]
	if(timer7_counter == 0){
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <timerRun+0x17c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <timerRun+0xe4>
		timer7_flag = 1;
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <timerRun+0x180>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0) timer8_counter--;
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <timerRun+0x184>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd04      	ble.n	80013ba <timerRun+0xf6>
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <timerRun+0x184>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4a24      	ldr	r2, [pc, #144]	; (8001448 <timerRun+0x184>)
 80013b8:	6013      	str	r3, [r2, #0]
	if(timer8_counter == 0){
 80013ba:	4b23      	ldr	r3, [pc, #140]	; (8001448 <timerRun+0x184>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <timerRun+0x104>
		timer8_flag = 1;
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <timerRun+0x188>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0) timer9_counter--;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <timerRun+0x18c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dd04      	ble.n	80013da <timerRun+0x116>
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <timerRun+0x18c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <timerRun+0x18c>)
 80013d8:	6013      	str	r3, [r2, #0]
	if(timer9_counter == 0){
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <timerRun+0x18c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <timerRun+0x124>
		timer9_flag = 1;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <timerRun+0x190>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
	}

	if(timer10_counter > 0) timer10_counter--;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <timerRun+0x194>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dd04      	ble.n	80013fa <timerRun+0x136>
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <timerRun+0x194>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <timerRun+0x194>)
 80013f8:	6013      	str	r3, [r2, #0]
	if(timer10_counter == 0){
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <timerRun+0x194>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <timerRun+0x144>
		timer10_flag = 1;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <timerRun+0x198>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
	}
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	200000c4 	.word	0x200000c4
 8001414:	200000c0 	.word	0x200000c0
 8001418:	200000cc 	.word	0x200000cc
 800141c:	200000c8 	.word	0x200000c8
 8001420:	200000d4 	.word	0x200000d4
 8001424:	200000d0 	.word	0x200000d0
 8001428:	200000dc 	.word	0x200000dc
 800142c:	200000d8 	.word	0x200000d8
 8001430:	200000e4 	.word	0x200000e4
 8001434:	200000e0 	.word	0x200000e0
 8001438:	200000ec 	.word	0x200000ec
 800143c:	200000e8 	.word	0x200000e8
 8001440:	200000f4 	.word	0x200000f4
 8001444:	200000f0 	.word	0x200000f0
 8001448:	200000fc 	.word	0x200000fc
 800144c:	200000f8 	.word	0x200000f8
 8001450:	20000104 	.word	0x20000104
 8001454:	20000100 	.word	0x20000100
 8001458:	2000010c 	.word	0x2000010c
 800145c:	20000108 	.word	0x20000108

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_MspInit+0x5c>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_MspInit+0x5c>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6193      	str	r3, [r2, #24]
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_MspInit+0x5c>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x5c>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_MspInit+0x5c>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_MspInit+0x5c>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_MspInit+0x60>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_MspInit+0x60>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010000 	.word	0x40010000

080014c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d4:	d113      	bne.n	80014fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_TIM_Base_MspInit+0x44>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_TIM_Base_MspInit+0x44>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_TIM_Base_MspInit+0x44>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	201c      	movs	r0, #28
 80014f4:	f000 fe3b 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f8:	201c      	movs	r0, #28
 80014fa:	f000 fe54 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001552:	f000 fd19 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM2_IRQHandler+0x10>)
 8001562:	f001 fc75 	bl	8002e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000138 	.word	0x20000138

08001570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <setRed_horizontal>:
 *      Author: VO HOANG HUY
 */
#include "traffic_light.h"
#include "main.h"

void setRed_horizontal(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2120      	movs	r1, #32
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <setRed_horizontal+0x28>)
 8001586:	f000 ffba 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <setRed_horizontal+0x28>)
 8001590:	f000 ffb5 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <setRed_horizontal+0x28>)
 800159a:	f000 ffb0 	bl	80024fe <HAL_GPIO_WritePin>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40010800 	.word	0x40010800

080015a8 <setGreen_horizontal>:

void setGreen_horizontal(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2120      	movs	r1, #32
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <setGreen_horizontal+0x28>)
 80015b2:	f000 ffa4 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2140      	movs	r1, #64	; 0x40
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <setGreen_horizontal+0x28>)
 80015bc:	f000 ff9f 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <setGreen_horizontal+0x28>)
 80015c6:	f000 ff9a 	bl	80024fe <HAL_GPIO_WritePin>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40010800 	.word	0x40010800

080015d4 <setYellow_horizontal>:

void setYellow_horizontal(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2120      	movs	r1, #32
 80015dc:	4807      	ldr	r0, [pc, #28]	; (80015fc <setYellow_horizontal+0x28>)
 80015de:	f000 ff8e 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2140      	movs	r1, #64	; 0x40
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <setYellow_horizontal+0x28>)
 80015e8:	f000 ff89 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <setYellow_horizontal+0x28>)
 80015f2:	f000 ff84 	bl	80024fe <HAL_GPIO_WritePin>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40010800 	.word	0x40010800

08001600 <setRed_vertical>:

void setRed_vertical(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160a:	4808      	ldr	r0, [pc, #32]	; (800162c <setRed_vertical+0x2c>)
 800160c:	f000 ff77 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <setRed_vertical+0x2c>)
 8001618:	f000 ff71 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001622:	4802      	ldr	r0, [pc, #8]	; (800162c <setRed_vertical+0x2c>)
 8001624:	f000 ff6b 	bl	80024fe <HAL_GPIO_WritePin>
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40010800 	.word	0x40010800

08001630 <setGreen_vertical>:

void setGreen_vertical(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163a:	4808      	ldr	r0, [pc, #32]	; (800165c <setGreen_vertical+0x2c>)
 800163c:	f000 ff5f 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <setGreen_vertical+0x2c>)
 8001648:	f000 ff59 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001652:	4802      	ldr	r0, [pc, #8]	; (800165c <setGreen_vertical+0x2c>)
 8001654:	f000 ff53 	bl	80024fe <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40010800 	.word	0x40010800

08001660 <setYellow_vertical>:

void setYellow_vertical(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166a:	4808      	ldr	r0, [pc, #32]	; (800168c <setYellow_vertical+0x2c>)
 800166c:	f000 ff47 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <setYellow_vertical+0x2c>)
 8001678:	f000 ff41 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001682:	4802      	ldr	r0, [pc, #8]	; (800168c <setYellow_vertical+0x2c>)
 8001684:	f000 ff3b 	bl	80024fe <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40010800 	.word	0x40010800

08001690 <toggleLedRed>:

void toggleLedRed(){
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8001694:	2108      	movs	r1, #8
 8001696:	4802      	ldr	r0, [pc, #8]	; (80016a0 <toggleLedRed+0x10>)
 8001698:	f000 ff49 	bl	800252e <HAL_GPIO_TogglePin>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40010800 	.word	0x40010800

080016a4 <toggleRed_horizontal>:

void toggleRed_horizontal(){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80016a8:	2120      	movs	r1, #32
 80016aa:	4802      	ldr	r0, [pc, #8]	; (80016b4 <toggleRed_horizontal+0x10>)
 80016ac:	f000 ff3f 	bl	800252e <HAL_GPIO_TogglePin>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40010800 	.word	0x40010800

080016b8 <toggleGreen_horizontal>:

void toggleGreen_horizontal(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	4802      	ldr	r0, [pc, #8]	; (80016c8 <toggleGreen_horizontal+0x10>)
 80016c0:	f000 ff35 	bl	800252e <HAL_GPIO_TogglePin>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40010800 	.word	0x40010800

080016cc <toggleYellow_horizontal>:

void toggleYellow_horizontal(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80016d0:	2140      	movs	r1, #64	; 0x40
 80016d2:	4802      	ldr	r0, [pc, #8]	; (80016dc <toggleYellow_horizontal+0x10>)
 80016d4:	f000 ff2b 	bl	800252e <HAL_GPIO_TogglePin>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40010800 	.word	0x40010800

080016e0 <toggleRed_vertical>:

void toggleRed_vertical(){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 80016e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <toggleRed_vertical+0x14>)
 80016ea:	f000 ff20 	bl	800252e <HAL_GPIO_TogglePin>
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40010800 	.word	0x40010800

080016f8 <toggleGreen_vertical>:

void toggleGreen_vertical(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80016fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <toggleGreen_vertical+0x14>)
 8001702:	f000 ff14 	bl	800252e <HAL_GPIO_TogglePin>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40010800 	.word	0x40010800

08001710 <toggleYellow_vertical>:

void toggleYellow_vertical(){
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8001714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <toggleYellow_vertical+0x14>)
 800171a:	f000 ff08 	bl	800252e <HAL_GPIO_TogglePin>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40010800 	.word	0x40010800

08001728 <offGreenYellow_horizontal>:
void offAllLed_horizontal(){
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
}
void offGreenYellow_horizontal(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <offGreenYellow_horizontal+0x1c>)
 8001732:	f000 fee4 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	4802      	ldr	r0, [pc, #8]	; (8001744 <offGreenYellow_horizontal+0x1c>)
 800173c:	f000 fedf 	bl	80024fe <HAL_GPIO_WritePin>
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40010800 	.word	0x40010800

08001748 <offGreenRed_horizontal>:
void offGreenRed_horizontal(){
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	2120      	movs	r1, #32
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <offGreenRed_horizontal+0x1c>)
 8001752:	f000 fed4 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	4802      	ldr	r0, [pc, #8]	; (8001764 <offGreenRed_horizontal+0x1c>)
 800175c:	f000 fecf 	bl	80024fe <HAL_GPIO_WritePin>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40010800 	.word	0x40010800

08001768 <offRedYellow_horizontal>:
void offRedYellow_horizontal(){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2120      	movs	r1, #32
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <offRedYellow_horizontal+0x1c>)
 8001772:	f000 fec4 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8001776:	2201      	movs	r2, #1
 8001778:	2140      	movs	r1, #64	; 0x40
 800177a:	4802      	ldr	r0, [pc, #8]	; (8001784 <offRedYellow_horizontal+0x1c>)
 800177c:	f000 febf 	bl	80024fe <HAL_GPIO_WritePin>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40010800 	.word	0x40010800

08001788 <offGreenYellow_vertical>:
void offAllLed_vertical(){
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
}
void offGreenYellow_vertical(){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <offGreenYellow_vertical+0x20>)
 8001794:	f000 feb3 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179e:	4802      	ldr	r0, [pc, #8]	; (80017a8 <offGreenYellow_vertical+0x20>)
 80017a0:	f000 fead 	bl	80024fe <HAL_GPIO_WritePin>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40010800 	.word	0x40010800

080017ac <offGreenRed_vertical>:
void offGreenRed_vertical(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <offGreenRed_vertical+0x20>)
 80017b8:	f000 fea1 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c2:	4802      	ldr	r0, [pc, #8]	; (80017cc <offGreenRed_vertical+0x20>)
 80017c4:	f000 fe9b 	bl	80024fe <HAL_GPIO_WritePin>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40010800 	.word	0x40010800

080017d0 <offRedYellow_vertical>:
void offRedYellow_vertical(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <offRedYellow_vertical+0x20>)
 80017dc:	f000 fe8f 	bl	80024fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e6:	4802      	ldr	r0, [pc, #8]	; (80017f0 <offRedYellow_vertical+0x20>)
 80017e8:	f000 fe89 	bl	80024fe <HAL_GPIO_WritePin>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40010800 	.word	0x40010800

080017f4 <display7SEG_horizontal>:
void display7SEG_horizontal(int num){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b09      	cmp	r3, #9
 8001800:	f200 8180 	bhi.w	8001b04 <display7SEG_horizontal+0x310>
 8001804:	a201      	add	r2, pc, #4	; (adr r2, 800180c <display7SEG_horizontal+0x18>)
 8001806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180a:	bf00      	nop
 800180c:	08001835 	.word	0x08001835
 8001810:	0800187d 	.word	0x0800187d
 8001814:	080018c5 	.word	0x080018c5
 8001818:	0800190d 	.word	0x0800190d
 800181c:	08001955 	.word	0x08001955
 8001820:	0800199d 	.word	0x0800199d
 8001824:	080019e5 	.word	0x080019e5
 8001828:	08001a2d 	.word	0x08001a2d
 800182c:	08001a75 	.word	0x08001a75
 8001830:	08001abd 	.word	0x08001abd
	switch(num){
	case 0:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2101      	movs	r1, #1
 8001838:	48b5      	ldr	r0, [pc, #724]	; (8001b10 <display7SEG_horizontal+0x31c>)
 800183a:	f000 fe60 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2102      	movs	r1, #2
 8001842:	48b3      	ldr	r0, [pc, #716]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001844:	f000 fe5b 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2104      	movs	r1, #4
 800184c:	48b0      	ldr	r0, [pc, #704]	; (8001b10 <display7SEG_horizontal+0x31c>)
 800184e:	f000 fe56 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2108      	movs	r1, #8
 8001856:	48ae      	ldr	r0, [pc, #696]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001858:	f000 fe51 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2110      	movs	r1, #16
 8001860:	48ab      	ldr	r0, [pc, #684]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001862:	f000 fe4c 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2120      	movs	r1, #32
 800186a:	48a9      	ldr	r0, [pc, #676]	; (8001b10 <display7SEG_horizontal+0x31c>)
 800186c:	f000 fe47 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	2140      	movs	r1, #64	; 0x40
 8001874:	48a6      	ldr	r0, [pc, #664]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001876:	f000 fe42 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 800187a:	e144      	b.n	8001b06 <display7SEG_horizontal+0x312>
	case 1:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2101      	movs	r1, #1
 8001880:	48a3      	ldr	r0, [pc, #652]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001882:	f000 fe3c 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2102      	movs	r1, #2
 800188a:	48a1      	ldr	r0, [pc, #644]	; (8001b10 <display7SEG_horizontal+0x31c>)
 800188c:	f000 fe37 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2104      	movs	r1, #4
 8001894:	489e      	ldr	r0, [pc, #632]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001896:	f000 fe32 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	2108      	movs	r1, #8
 800189e:	489c      	ldr	r0, [pc, #624]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80018a0:	f000 fe2d 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2110      	movs	r1, #16
 80018a8:	4899      	ldr	r0, [pc, #612]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80018aa:	f000 fe28 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80018ae:	2201      	movs	r2, #1
 80018b0:	2120      	movs	r1, #32
 80018b2:	4897      	ldr	r0, [pc, #604]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80018b4:	f000 fe23 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2140      	movs	r1, #64	; 0x40
 80018bc:	4894      	ldr	r0, [pc, #592]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80018be:	f000 fe1e 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 80018c2:	e120      	b.n	8001b06 <display7SEG_horizontal+0x312>
	case 2:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2101      	movs	r1, #1
 80018c8:	4891      	ldr	r0, [pc, #580]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80018ca:	f000 fe18 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2102      	movs	r1, #2
 80018d2:	488f      	ldr	r0, [pc, #572]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80018d4:	f000 fe13 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	2104      	movs	r1, #4
 80018dc:	488c      	ldr	r0, [pc, #560]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80018de:	f000 fe0e 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2108      	movs	r1, #8
 80018e6:	488a      	ldr	r0, [pc, #552]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80018e8:	f000 fe09 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2110      	movs	r1, #16
 80018f0:	4887      	ldr	r0, [pc, #540]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80018f2:	f000 fe04 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	2120      	movs	r1, #32
 80018fa:	4885      	ldr	r0, [pc, #532]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80018fc:	f000 fdff 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2140      	movs	r1, #64	; 0x40
 8001904:	4882      	ldr	r0, [pc, #520]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001906:	f000 fdfa 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 800190a:	e0fc      	b.n	8001b06 <display7SEG_horizontal+0x312>
	case 3:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2101      	movs	r1, #1
 8001910:	487f      	ldr	r0, [pc, #508]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001912:	f000 fdf4 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2102      	movs	r1, #2
 800191a:	487d      	ldr	r0, [pc, #500]	; (8001b10 <display7SEG_horizontal+0x31c>)
 800191c:	f000 fdef 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2104      	movs	r1, #4
 8001924:	487a      	ldr	r0, [pc, #488]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001926:	f000 fdea 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2108      	movs	r1, #8
 800192e:	4878      	ldr	r0, [pc, #480]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001930:	f000 fde5 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2110      	movs	r1, #16
 8001938:	4875      	ldr	r0, [pc, #468]	; (8001b10 <display7SEG_horizontal+0x31c>)
 800193a:	f000 fde0 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	2120      	movs	r1, #32
 8001942:	4873      	ldr	r0, [pc, #460]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001944:	f000 fddb 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	4870      	ldr	r0, [pc, #448]	; (8001b10 <display7SEG_horizontal+0x31c>)
 800194e:	f000 fdd6 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001952:	e0d8      	b.n	8001b06 <display7SEG_horizontal+0x312>
	case 4:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2101      	movs	r1, #1
 8001958:	486d      	ldr	r0, [pc, #436]	; (8001b10 <display7SEG_horizontal+0x31c>)
 800195a:	f000 fdd0 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2102      	movs	r1, #2
 8001962:	486b      	ldr	r0, [pc, #428]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001964:	f000 fdcb 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2104      	movs	r1, #4
 800196c:	4868      	ldr	r0, [pc, #416]	; (8001b10 <display7SEG_horizontal+0x31c>)
 800196e:	f000 fdc6 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8001972:	2201      	movs	r2, #1
 8001974:	2108      	movs	r1, #8
 8001976:	4866      	ldr	r0, [pc, #408]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001978:	f000 fdc1 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	2110      	movs	r1, #16
 8001980:	4863      	ldr	r0, [pc, #396]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001982:	f000 fdbc 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2120      	movs	r1, #32
 800198a:	4861      	ldr	r0, [pc, #388]	; (8001b10 <display7SEG_horizontal+0x31c>)
 800198c:	f000 fdb7 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2140      	movs	r1, #64	; 0x40
 8001994:	485e      	ldr	r0, [pc, #376]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001996:	f000 fdb2 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 800199a:	e0b4      	b.n	8001b06 <display7SEG_horizontal+0x312>
	case 5:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	2101      	movs	r1, #1
 80019a0:	485b      	ldr	r0, [pc, #364]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80019a2:	f000 fdac 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2102      	movs	r1, #2
 80019aa:	4859      	ldr	r0, [pc, #356]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80019ac:	f000 fda7 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2104      	movs	r1, #4
 80019b4:	4856      	ldr	r0, [pc, #344]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80019b6:	f000 fda2 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2108      	movs	r1, #8
 80019be:	4854      	ldr	r0, [pc, #336]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80019c0:	f000 fd9d 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	2110      	movs	r1, #16
 80019c8:	4851      	ldr	r0, [pc, #324]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80019ca:	f000 fd98 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2120      	movs	r1, #32
 80019d2:	484f      	ldr	r0, [pc, #316]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80019d4:	f000 fd93 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	2140      	movs	r1, #64	; 0x40
 80019dc:	484c      	ldr	r0, [pc, #304]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80019de:	f000 fd8e 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 80019e2:	e090      	b.n	8001b06 <display7SEG_horizontal+0x312>
	case 6:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2101      	movs	r1, #1
 80019e8:	4849      	ldr	r0, [pc, #292]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80019ea:	f000 fd88 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2102      	movs	r1, #2
 80019f2:	4847      	ldr	r0, [pc, #284]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80019f4:	f000 fd83 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2104      	movs	r1, #4
 80019fc:	4844      	ldr	r0, [pc, #272]	; (8001b10 <display7SEG_horizontal+0x31c>)
 80019fe:	f000 fd7e 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2108      	movs	r1, #8
 8001a06:	4842      	ldr	r0, [pc, #264]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a08:	f000 fd79 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2110      	movs	r1, #16
 8001a10:	483f      	ldr	r0, [pc, #252]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a12:	f000 fd74 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2120      	movs	r1, #32
 8001a1a:	483d      	ldr	r0, [pc, #244]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a1c:	f000 fd6f 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2140      	movs	r1, #64	; 0x40
 8001a24:	483a      	ldr	r0, [pc, #232]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a26:	f000 fd6a 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001a2a:	e06c      	b.n	8001b06 <display7SEG_horizontal+0x312>
	case 7:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4837      	ldr	r0, [pc, #220]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a32:	f000 fd64 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4835      	ldr	r0, [pc, #212]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a3c:	f000 fd5f 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2104      	movs	r1, #4
 8001a44:	4832      	ldr	r0, [pc, #200]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a46:	f000 fd5a 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2108      	movs	r1, #8
 8001a4e:	4830      	ldr	r0, [pc, #192]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a50:	f000 fd55 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	2110      	movs	r1, #16
 8001a58:	482d      	ldr	r0, [pc, #180]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a5a:	f000 fd50 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2120      	movs	r1, #32
 8001a62:	482b      	ldr	r0, [pc, #172]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a64:	f000 fd4b 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2140      	movs	r1, #64	; 0x40
 8001a6c:	4828      	ldr	r0, [pc, #160]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a6e:	f000 fd46 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001a72:	e048      	b.n	8001b06 <display7SEG_horizontal+0x312>
	case 8:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2101      	movs	r1, #1
 8001a78:	4825      	ldr	r0, [pc, #148]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a7a:	f000 fd40 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2102      	movs	r1, #2
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a84:	f000 fd3b 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	4820      	ldr	r0, [pc, #128]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a8e:	f000 fd36 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2108      	movs	r1, #8
 8001a96:	481e      	ldr	r0, [pc, #120]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001a98:	f000 fd31 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	481b      	ldr	r0, [pc, #108]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001aa2:	f000 fd2c 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	4819      	ldr	r0, [pc, #100]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001aac:	f000 fd27 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	4816      	ldr	r0, [pc, #88]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001ab6:	f000 fd22 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001aba:	e024      	b.n	8001b06 <display7SEG_horizontal+0x312>
	case 9:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4813      	ldr	r0, [pc, #76]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001ac2:	f000 fd1c 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4811      	ldr	r0, [pc, #68]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001acc:	f000 fd17 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	480e      	ldr	r0, [pc, #56]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001ad6:	f000 fd12 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2108      	movs	r1, #8
 8001ade:	480c      	ldr	r0, [pc, #48]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001ae0:	f000 fd0d 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	4809      	ldr	r0, [pc, #36]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001aea:	f000 fd08 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2120      	movs	r1, #32
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001af4:	f000 fd03 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2140      	movs	r1, #64	; 0x40
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <display7SEG_horizontal+0x31c>)
 8001afe:	f000 fcfe 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001b02:	e000      	b.n	8001b06 <display7SEG_horizontal+0x312>
	default:
		break;
 8001b04:	bf00      	nop
	}
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40010c00 	.word	0x40010c00

08001b14 <display7SEG_vertical>:
void display7SEG_vertical(int num){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b09      	cmp	r3, #9
 8001b20:	f200 81bf 	bhi.w	8001ea2 <display7SEG_vertical+0x38e>
 8001b24:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <display7SEG_vertical+0x18>)
 8001b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2a:	bf00      	nop
 8001b2c:	08001b55 	.word	0x08001b55
 8001b30:	08001bab 	.word	0x08001bab
 8001b34:	08001c01 	.word	0x08001c01
 8001b38:	08001c57 	.word	0x08001c57
 8001b3c:	08001cad 	.word	0x08001cad
 8001b40:	08001d03 	.word	0x08001d03
 8001b44:	08001d59 	.word	0x08001d59
 8001b48:	08001daf 	.word	0x08001daf
 8001b4c:	08001df7 	.word	0x08001df7
 8001b50:	08001e4d 	.word	0x08001e4d
	switch(num){
	case 0:
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b5a:	48d4      	ldr	r0, [pc, #848]	; (8001eac <display7SEG_vertical+0x398>)
 8001b5c:	f000 fccf 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b66:	48d1      	ldr	r0, [pc, #836]	; (8001eac <display7SEG_vertical+0x398>)
 8001b68:	f000 fcc9 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b72:	48ce      	ldr	r0, [pc, #824]	; (8001eac <display7SEG_vertical+0x398>)
 8001b74:	f000 fcc3 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b7e:	48cb      	ldr	r0, [pc, #812]	; (8001eac <display7SEG_vertical+0x398>)
 8001b80:	f000 fcbd 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8a:	48c8      	ldr	r0, [pc, #800]	; (8001eac <display7SEG_vertical+0x398>)
 8001b8c:	f000 fcb7 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b96:	48c5      	ldr	r0, [pc, #788]	; (8001eac <display7SEG_vertical+0x398>)
 8001b98:	f000 fcb1 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba2:	48c2      	ldr	r0, [pc, #776]	; (8001eac <display7SEG_vertical+0x398>)
 8001ba4:	f000 fcab 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001ba8:	e17c      	b.n	8001ea4 <display7SEG_vertical+0x390>
	case 1:
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 8001baa:	2201      	movs	r2, #1
 8001bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb0:	48be      	ldr	r0, [pc, #760]	; (8001eac <display7SEG_vertical+0x398>)
 8001bb2:	f000 fca4 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bbc:	48bb      	ldr	r0, [pc, #748]	; (8001eac <display7SEG_vertical+0x398>)
 8001bbe:	f000 fc9e 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc8:	48b8      	ldr	r0, [pc, #736]	; (8001eac <display7SEG_vertical+0x398>)
 8001bca:	f000 fc98 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bd4:	48b5      	ldr	r0, [pc, #724]	; (8001eac <display7SEG_vertical+0x398>)
 8001bd6:	f000 fc92 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be0:	48b2      	ldr	r0, [pc, #712]	; (8001eac <display7SEG_vertical+0x398>)
 8001be2:	f000 fc8c 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8001be6:	2201      	movs	r2, #1
 8001be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bec:	48af      	ldr	r0, [pc, #700]	; (8001eac <display7SEG_vertical+0x398>)
 8001bee:	f000 fc86 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf8:	48ac      	ldr	r0, [pc, #688]	; (8001eac <display7SEG_vertical+0x398>)
 8001bfa:	f000 fc80 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001bfe:	e151      	b.n	8001ea4 <display7SEG_vertical+0x390>
	case 2:
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c06:	48a9      	ldr	r0, [pc, #676]	; (8001eac <display7SEG_vertical+0x398>)
 8001c08:	f000 fc79 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c12:	48a6      	ldr	r0, [pc, #664]	; (8001eac <display7SEG_vertical+0x398>)
 8001c14:	f000 fc73 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c1e:	48a3      	ldr	r0, [pc, #652]	; (8001eac <display7SEG_vertical+0x398>)
 8001c20:	f000 fc6d 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c2a:	48a0      	ldr	r0, [pc, #640]	; (8001eac <display7SEG_vertical+0x398>)
 8001c2c:	f000 fc67 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c36:	489d      	ldr	r0, [pc, #628]	; (8001eac <display7SEG_vertical+0x398>)
 8001c38:	f000 fc61 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c42:	489a      	ldr	r0, [pc, #616]	; (8001eac <display7SEG_vertical+0x398>)
 8001c44:	f000 fc5b 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c4e:	4897      	ldr	r0, [pc, #604]	; (8001eac <display7SEG_vertical+0x398>)
 8001c50:	f000 fc55 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001c54:	e126      	b.n	8001ea4 <display7SEG_vertical+0x390>
	case 3:
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c5c:	4893      	ldr	r0, [pc, #588]	; (8001eac <display7SEG_vertical+0x398>)
 8001c5e:	f000 fc4e 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c68:	4890      	ldr	r0, [pc, #576]	; (8001eac <display7SEG_vertical+0x398>)
 8001c6a:	f000 fc48 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c74:	488d      	ldr	r0, [pc, #564]	; (8001eac <display7SEG_vertical+0x398>)
 8001c76:	f000 fc42 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c80:	488a      	ldr	r0, [pc, #552]	; (8001eac <display7SEG_vertical+0x398>)
 8001c82:	f000 fc3c 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8c:	4887      	ldr	r0, [pc, #540]	; (8001eac <display7SEG_vertical+0x398>)
 8001c8e:	f000 fc36 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c98:	4884      	ldr	r0, [pc, #528]	; (8001eac <display7SEG_vertical+0x398>)
 8001c9a:	f000 fc30 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca4:	4881      	ldr	r0, [pc, #516]	; (8001eac <display7SEG_vertical+0x398>)
 8001ca6:	f000 fc2a 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001caa:	e0fb      	b.n	8001ea4 <display7SEG_vertical+0x390>
	case 4:
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb2:	487e      	ldr	r0, [pc, #504]	; (8001eac <display7SEG_vertical+0x398>)
 8001cb4:	f000 fc23 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cbe:	487b      	ldr	r0, [pc, #492]	; (8001eac <display7SEG_vertical+0x398>)
 8001cc0:	f000 fc1d 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cca:	4878      	ldr	r0, [pc, #480]	; (8001eac <display7SEG_vertical+0x398>)
 8001ccc:	f000 fc17 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd6:	4875      	ldr	r0, [pc, #468]	; (8001eac <display7SEG_vertical+0x398>)
 8001cd8:	f000 fc11 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce2:	4872      	ldr	r0, [pc, #456]	; (8001eac <display7SEG_vertical+0x398>)
 8001ce4:	f000 fc0b 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cee:	486f      	ldr	r0, [pc, #444]	; (8001eac <display7SEG_vertical+0x398>)
 8001cf0:	f000 fc05 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cfa:	486c      	ldr	r0, [pc, #432]	; (8001eac <display7SEG_vertical+0x398>)
 8001cfc:	f000 fbff 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001d00:	e0d0      	b.n	8001ea4 <display7SEG_vertical+0x390>
	case 5:
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d08:	4868      	ldr	r0, [pc, #416]	; (8001eac <display7SEG_vertical+0x398>)
 8001d0a:	f000 fbf8 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d14:	4865      	ldr	r0, [pc, #404]	; (8001eac <display7SEG_vertical+0x398>)
 8001d16:	f000 fbf2 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d20:	4862      	ldr	r0, [pc, #392]	; (8001eac <display7SEG_vertical+0x398>)
 8001d22:	f000 fbec 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2c:	485f      	ldr	r0, [pc, #380]	; (8001eac <display7SEG_vertical+0x398>)
 8001d2e:	f000 fbe6 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d38:	485c      	ldr	r0, [pc, #368]	; (8001eac <display7SEG_vertical+0x398>)
 8001d3a:	f000 fbe0 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d44:	4859      	ldr	r0, [pc, #356]	; (8001eac <display7SEG_vertical+0x398>)
 8001d46:	f000 fbda 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d50:	4856      	ldr	r0, [pc, #344]	; (8001eac <display7SEG_vertical+0x398>)
 8001d52:	f000 fbd4 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001d56:	e0a5      	b.n	8001ea4 <display7SEG_vertical+0x390>
	case 6:
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d5e:	4853      	ldr	r0, [pc, #332]	; (8001eac <display7SEG_vertical+0x398>)
 8001d60:	f000 fbcd 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d6a:	4850      	ldr	r0, [pc, #320]	; (8001eac <display7SEG_vertical+0x398>)
 8001d6c:	f000 fbc7 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d76:	484d      	ldr	r0, [pc, #308]	; (8001eac <display7SEG_vertical+0x398>)
 8001d78:	f000 fbc1 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d82:	484a      	ldr	r0, [pc, #296]	; (8001eac <display7SEG_vertical+0x398>)
 8001d84:	f000 fbbb 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d8e:	4847      	ldr	r0, [pc, #284]	; (8001eac <display7SEG_vertical+0x398>)
 8001d90:	f000 fbb5 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d9a:	4844      	ldr	r0, [pc, #272]	; (8001eac <display7SEG_vertical+0x398>)
 8001d9c:	f000 fbaf 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da6:	4841      	ldr	r0, [pc, #260]	; (8001eac <display7SEG_vertical+0x398>)
 8001da8:	f000 fba9 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001dac:	e07a      	b.n	8001ea4 <display7SEG_vertical+0x390>
	case 7:
		HAL_GPIO_WritePin(a2_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2101      	movs	r1, #1
 8001db2:	483e      	ldr	r0, [pc, #248]	; (8001eac <display7SEG_vertical+0x398>)
 8001db4:	f000 fba3 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2102      	movs	r1, #2
 8001dbc:	483b      	ldr	r0, [pc, #236]	; (8001eac <display7SEG_vertical+0x398>)
 8001dbe:	f000 fb9e 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	4839      	ldr	r0, [pc, #228]	; (8001eac <display7SEG_vertical+0x398>)
 8001dc8:	f000 fb99 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2108      	movs	r1, #8
 8001dd0:	4836      	ldr	r0, [pc, #216]	; (8001eac <display7SEG_vertical+0x398>)
 8001dd2:	f000 fb94 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	2110      	movs	r1, #16
 8001dda:	4834      	ldr	r0, [pc, #208]	; (8001eac <display7SEG_vertical+0x398>)
 8001ddc:	f000 fb8f 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2120      	movs	r1, #32
 8001de4:	4831      	ldr	r0, [pc, #196]	; (8001eac <display7SEG_vertical+0x398>)
 8001de6:	f000 fb8a 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8001dea:	2201      	movs	r2, #1
 8001dec:	2140      	movs	r1, #64	; 0x40
 8001dee:	482f      	ldr	r0, [pc, #188]	; (8001eac <display7SEG_vertical+0x398>)
 8001df0:	f000 fb85 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001df4:	e056      	b.n	8001ea4 <display7SEG_vertical+0x390>
	case 8:
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dfc:	482b      	ldr	r0, [pc, #172]	; (8001eac <display7SEG_vertical+0x398>)
 8001dfe:	f000 fb7e 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e08:	4828      	ldr	r0, [pc, #160]	; (8001eac <display7SEG_vertical+0x398>)
 8001e0a:	f000 fb78 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e14:	4825      	ldr	r0, [pc, #148]	; (8001eac <display7SEG_vertical+0x398>)
 8001e16:	f000 fb72 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e20:	4822      	ldr	r0, [pc, #136]	; (8001eac <display7SEG_vertical+0x398>)
 8001e22:	f000 fb6c 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2c:	481f      	ldr	r0, [pc, #124]	; (8001eac <display7SEG_vertical+0x398>)
 8001e2e:	f000 fb66 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e38:	481c      	ldr	r0, [pc, #112]	; (8001eac <display7SEG_vertical+0x398>)
 8001e3a:	f000 fb60 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e44:	4819      	ldr	r0, [pc, #100]	; (8001eac <display7SEG_vertical+0x398>)
 8001e46:	f000 fb5a 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001e4a:	e02b      	b.n	8001ea4 <display7SEG_vertical+0x390>
	case 9:
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e52:	4816      	ldr	r0, [pc, #88]	; (8001eac <display7SEG_vertical+0x398>)
 8001e54:	f000 fb53 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e5e:	4813      	ldr	r0, [pc, #76]	; (8001eac <display7SEG_vertical+0x398>)
 8001e60:	f000 fb4d 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6a:	4810      	ldr	r0, [pc, #64]	; (8001eac <display7SEG_vertical+0x398>)
 8001e6c:	f000 fb47 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e76:	480d      	ldr	r0, [pc, #52]	; (8001eac <display7SEG_vertical+0x398>)
 8001e78:	f000 fb41 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e82:	480a      	ldr	r0, [pc, #40]	; (8001eac <display7SEG_vertical+0x398>)
 8001e84:	f000 fb3b 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8e:	4807      	ldr	r0, [pc, #28]	; (8001eac <display7SEG_vertical+0x398>)
 8001e90:	f000 fb35 	bl	80024fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e9a:	4804      	ldr	r0, [pc, #16]	; (8001eac <display7SEG_vertical+0x398>)
 8001e9c:	f000 fb2f 	bl	80024fe <HAL_GPIO_WritePin>
		break;
 8001ea0:	e000      	b.n	8001ea4 <display7SEG_vertical+0x390>
	default:
		break;
 8001ea2:	bf00      	nop
	}
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40010c00 	.word	0x40010c00

08001eb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb0:	f7ff fb5e 	bl	8001570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eb6:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ebc:	e002      	b.n	8001ec4 <LoopCopyDataInit>

08001ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec2:	3304      	adds	r3, #4

08001ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec8:	d3f9      	bcc.n	8001ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ecc:	4c09      	ldr	r4, [pc, #36]	; (8001ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed0:	e001      	b.n	8001ed6 <LoopFillZerobss>

08001ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed4:	3204      	adds	r2, #4

08001ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed8:	d3fb      	bcc.n	8001ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eda:	f001 faf9 	bl	80034d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ede:	f7fe ffc3 	bl	8000e68 <main>
  bx lr
 8001ee2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001eec:	0800356c 	.word	0x0800356c
  ldr r2, =_sbss
 8001ef0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ef4:	20000184 	.word	0x20000184

08001ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC1_2_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_Init+0x28>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_Init+0x28>)
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 f923 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f12:	200f      	movs	r0, #15
 8001f14:	f000 f808 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f18:	f7ff faa2 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000

08001f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_InitTick+0x54>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_InitTick+0x58>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f93b 	bl	80021c2 <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00e      	b.n	8001f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d80a      	bhi.n	8001f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f000 f903 	bl	800216e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_InitTick+0x5c>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000080 	.word	0x20000080
 8001f80:	20000088 	.word	0x20000088
 8001f84:	20000084 	.word	0x20000084

08001f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_IncTick+0x1c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000088 	.word	0x20000088
 8001fa8:	20000180 	.word	0x20000180

08001fac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HAL_GetTick+0x10>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000180 	.word	0x20000180

08001fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <__NVIC_GetPriorityGrouping+0x18>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0307 	and.w	r3, r3, #7
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db0b      	blt.n	800204e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4906      	ldr	r1, [pc, #24]	; (8002058 <__NVIC_EnableIRQ+0x34>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2001      	movs	r0, #1
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100

0800205c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db0a      	blt.n	8002086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	490c      	ldr	r1, [pc, #48]	; (80020a8 <__NVIC_SetPriority+0x4c>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	440b      	add	r3, r1
 8002080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002084:	e00a      	b.n	800209c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4908      	ldr	r1, [pc, #32]	; (80020ac <__NVIC_SetPriority+0x50>)
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	3b04      	subs	r3, #4
 8002094:	0112      	lsls	r2, r2, #4
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	440b      	add	r3, r1
 800209a:	761a      	strb	r2, [r3, #24]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f1c3 0307 	rsb	r3, r3, #7
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	bf28      	it	cs
 80020ce:	2304      	movcs	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3304      	adds	r3, #4
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d902      	bls.n	80020e0 <NVIC_EncodePriority+0x30>
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3b03      	subs	r3, #3
 80020de:	e000      	b.n	80020e2 <NVIC_EncodePriority+0x32>
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	401a      	ands	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43d9      	mvns	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	4313      	orrs	r3, r2
         );
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	; 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff90 	bl	800205c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff2d 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff42 	bl	8002008 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff90 	bl	80020b0 <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5f 	bl	800205c <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff35 	bl	8002024 <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa2 	bl	8002114 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b08b      	sub	sp, #44	; 0x2c
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ee:	e148      	b.n	8002482 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021f0:	2201      	movs	r2, #1
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8137 	bne.w	800247c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4aa3      	ldr	r2, [pc, #652]	; (80024a0 <HAL_GPIO_Init+0x2c4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d05e      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002218:	4aa1      	ldr	r2, [pc, #644]	; (80024a0 <HAL_GPIO_Init+0x2c4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d875      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 800221e:	4aa1      	ldr	r2, [pc, #644]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d058      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002224:	4a9f      	ldr	r2, [pc, #636]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d86f      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 800222a:	4a9f      	ldr	r2, [pc, #636]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d052      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002230:	4a9d      	ldr	r2, [pc, #628]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d869      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 8002236:	4a9d      	ldr	r2, [pc, #628]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d04c      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 800223c:	4a9b      	ldr	r2, [pc, #620]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d863      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 8002242:	4a9b      	ldr	r2, [pc, #620]	; (80024b0 <HAL_GPIO_Init+0x2d4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d046      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002248:	4a99      	ldr	r2, [pc, #612]	; (80024b0 <HAL_GPIO_Init+0x2d4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d85d      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 800224e:	2b12      	cmp	r3, #18
 8002250:	d82a      	bhi.n	80022a8 <HAL_GPIO_Init+0xcc>
 8002252:	2b12      	cmp	r3, #18
 8002254:	d859      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <HAL_GPIO_Init+0x80>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	080022d7 	.word	0x080022d7
 8002260:	080022b1 	.word	0x080022b1
 8002264:	080022c3 	.word	0x080022c3
 8002268:	08002305 	.word	0x08002305
 800226c:	0800230b 	.word	0x0800230b
 8002270:	0800230b 	.word	0x0800230b
 8002274:	0800230b 	.word	0x0800230b
 8002278:	0800230b 	.word	0x0800230b
 800227c:	0800230b 	.word	0x0800230b
 8002280:	0800230b 	.word	0x0800230b
 8002284:	0800230b 	.word	0x0800230b
 8002288:	0800230b 	.word	0x0800230b
 800228c:	0800230b 	.word	0x0800230b
 8002290:	0800230b 	.word	0x0800230b
 8002294:	0800230b 	.word	0x0800230b
 8002298:	0800230b 	.word	0x0800230b
 800229c:	0800230b 	.word	0x0800230b
 80022a0:	080022b9 	.word	0x080022b9
 80022a4:	080022cd 	.word	0x080022cd
 80022a8:	4a82      	ldr	r2, [pc, #520]	; (80024b4 <HAL_GPIO_Init+0x2d8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ae:	e02c      	b.n	800230a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	623b      	str	r3, [r7, #32]
          break;
 80022b6:	e029      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	3304      	adds	r3, #4
 80022be:	623b      	str	r3, [r7, #32]
          break;
 80022c0:	e024      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	3308      	adds	r3, #8
 80022c8:	623b      	str	r3, [r7, #32]
          break;
 80022ca:	e01f      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	330c      	adds	r3, #12
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e01a      	b.n	800230c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022de:	2304      	movs	r3, #4
 80022e0:	623b      	str	r3, [r7, #32]
          break;
 80022e2:	e013      	b.n	800230c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ec:	2308      	movs	r3, #8
 80022ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	611a      	str	r2, [r3, #16]
          break;
 80022f6:	e009      	b.n	800230c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f8:	2308      	movs	r3, #8
 80022fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	615a      	str	r2, [r3, #20]
          break;
 8002302:	e003      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
          break;
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x130>
          break;
 800230a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2bff      	cmp	r3, #255	; 0xff
 8002310:	d801      	bhi.n	8002316 <HAL_GPIO_Init+0x13a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e001      	b.n	800231a <HAL_GPIO_Init+0x13e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2bff      	cmp	r3, #255	; 0xff
 8002320:	d802      	bhi.n	8002328 <HAL_GPIO_Init+0x14c>
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	e002      	b.n	800232e <HAL_GPIO_Init+0x152>
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	3b08      	subs	r3, #8
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	210f      	movs	r1, #15
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	fa01 f303 	lsl.w	r3, r1, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	401a      	ands	r2, r3
 8002340:	6a39      	ldr	r1, [r7, #32]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	431a      	orrs	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8090 	beq.w	800247c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800235c:	4b56      	ldr	r3, [pc, #344]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a55      	ldr	r2, [pc, #340]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_GPIO_Init+0x2dc>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002374:	4a51      	ldr	r2, [pc, #324]	; (80024bc <HAL_GPIO_Init+0x2e0>)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	3302      	adds	r3, #2
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	220f      	movs	r2, #15
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a49      	ldr	r2, [pc, #292]	; (80024c0 <HAL_GPIO_Init+0x2e4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00d      	beq.n	80023bc <HAL_GPIO_Init+0x1e0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a48      	ldr	r2, [pc, #288]	; (80024c4 <HAL_GPIO_Init+0x2e8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <HAL_GPIO_Init+0x1dc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a47      	ldr	r2, [pc, #284]	; (80024c8 <HAL_GPIO_Init+0x2ec>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_GPIO_Init+0x1d8>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e004      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023b4:	2303      	movs	r3, #3
 80023b6:	e002      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_GPIO_Init+0x1e2>
 80023bc:	2300      	movs	r3, #0
 80023be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c0:	f002 0203 	and.w	r2, r2, #3
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	4093      	lsls	r3, r2
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ce:	493b      	ldr	r1, [pc, #236]	; (80024bc <HAL_GPIO_Init+0x2e0>)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023e8:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	4937      	ldr	r1, [pc, #220]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023f6:	4b35      	ldr	r3, [pc, #212]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	4933      	ldr	r1, [pc, #204]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002400:	4013      	ands	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002410:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	492d      	ldr	r1, [pc, #180]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	60cb      	str	r3, [r1, #12]
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	43db      	mvns	r3, r3
 8002426:	4929      	ldr	r1, [pc, #164]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002428:	4013      	ands	r3, r2
 800242a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4923      	ldr	r1, [pc, #140]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002446:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	43db      	mvns	r3, r3
 800244e:	491f      	ldr	r1, [pc, #124]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002450:	4013      	ands	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4919      	ldr	r1, [pc, #100]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4915      	ldr	r1, [pc, #84]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 8002478:	4013      	ands	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	3301      	adds	r3, #1
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f aeaf 	bne.w	80021f0 <HAL_GPIO_Init+0x14>
  }
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	372c      	adds	r7, #44	; 0x2c
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	10320000 	.word	0x10320000
 80024a4:	10310000 	.word	0x10310000
 80024a8:	10220000 	.word	0x10220000
 80024ac:	10210000 	.word	0x10210000
 80024b0:	10120000 	.word	0x10120000
 80024b4:	10110000 	.word	0x10110000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40010000 	.word	0x40010000
 80024c0:	40010800 	.word	0x40010800
 80024c4:	40010c00 	.word	0x40010c00
 80024c8:	40011000 	.word	0x40011000
 80024cc:	40010400 	.word	0x40010400

080024d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e001      	b.n	80024f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	807b      	strh	r3, [r7, #2]
 800250a:	4613      	mov	r3, r2
 800250c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800250e:	787b      	ldrb	r3, [r7, #1]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002514:	887a      	ldrh	r2, [r7, #2]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800251a:	e003      	b.n	8002524 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	041a      	lsls	r2, r3, #16
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	611a      	str	r2, [r3, #16]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800252e:	b480      	push	{r7}
 8002530:	b085      	sub	sp, #20
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002540:	887a      	ldrh	r2, [r7, #2]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4013      	ands	r3, r2
 8002546:	041a      	lsls	r2, r3, #16
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43d9      	mvns	r1, r3
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	400b      	ands	r3, r1
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	611a      	str	r2, [r3, #16]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e26c      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8087 	beq.w	800268e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002580:	4b92      	ldr	r3, [pc, #584]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b04      	cmp	r3, #4
 800258a:	d00c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800258c:	4b8f      	ldr	r3, [pc, #572]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d112      	bne.n	80025be <HAL_RCC_OscConfig+0x5e>
 8002598:	4b8c      	ldr	r3, [pc, #560]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d10b      	bne.n	80025be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a6:	4b89      	ldr	r3, [pc, #548]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d06c      	beq.n	800268c <HAL_RCC_OscConfig+0x12c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d168      	bne.n	800268c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e246      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x76>
 80025c8:	4b80      	ldr	r3, [pc, #512]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7f      	ldr	r2, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e02e      	b.n	8002634 <HAL_RCC_OscConfig+0xd4>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x98>
 80025de:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a7a      	ldr	r2, [pc, #488]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b78      	ldr	r3, [pc, #480]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a77      	ldr	r2, [pc, #476]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80025f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e01d      	b.n	8002634 <HAL_RCC_OscConfig+0xd4>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0xbc>
 8002602:	4b72      	ldr	r3, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a71      	ldr	r2, [pc, #452]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0xd4>
 800261c:	4b6b      	ldr	r3, [pc, #428]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6a      	ldr	r2, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b68      	ldr	r3, [pc, #416]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a67      	ldr	r2, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800262e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff fcb6 	bl	8001fac <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7ff fcb2 	bl	8001fac <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1fa      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b5d      	ldr	r3, [pc, #372]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0xe4>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7ff fca2 	bl	8001fac <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800266c:	f7ff fc9e 	bl	8001fac <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1e6      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x10c>
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d063      	beq.n	8002762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800269a:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026a6:	4b49      	ldr	r3, [pc, #292]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d11c      	bne.n	80026ec <HAL_RCC_OscConfig+0x18c>
 80026b2:	4b46      	ldr	r3, [pc, #280]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x176>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e1ba      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4939      	ldr	r1, [pc, #228]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	e03a      	b.n	8002762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_RCC_OscConfig+0x270>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7ff fc57 	bl	8001fac <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002702:	f7ff fc53 	bl	8001fac <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e19b      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4927      	ldr	r1, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
 8002734:	e015      	b.n	8002762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_RCC_OscConfig+0x270>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff fc36 	bl	8001fac <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002744:	f7ff fc32 	bl	8001fac <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e17a      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d03a      	beq.n	80027e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d019      	beq.n	80027aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002776:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <HAL_RCC_OscConfig+0x274>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7ff fc16 	bl	8001fac <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002784:	f7ff fc12 	bl	8001fac <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e15a      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_RCC_OscConfig+0x26c>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027a2:	2001      	movs	r0, #1
 80027a4:	f000 fa9a 	bl	8002cdc <RCC_Delay>
 80027a8:	e01c      	b.n	80027e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_RCC_OscConfig+0x274>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7ff fbfc 	bl	8001fac <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b6:	e00f      	b.n	80027d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b8:	f7ff fbf8 	bl	8001fac <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d908      	bls.n	80027d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e140      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	42420000 	.word	0x42420000
 80027d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	4b9e      	ldr	r3, [pc, #632]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e9      	bne.n	80027b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a6 	beq.w	800293e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f6:	4b97      	ldr	r3, [pc, #604]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10d      	bne.n	800281e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	4b94      	ldr	r3, [pc, #592]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a93      	ldr	r2, [pc, #588]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	61d3      	str	r3, [r2, #28]
 800280e:	4b91      	ldr	r3, [pc, #580]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281a:	2301      	movs	r3, #1
 800281c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b8e      	ldr	r3, [pc, #568]	; (8002a58 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282a:	4b8b      	ldr	r3, [pc, #556]	; (8002a58 <HAL_RCC_OscConfig+0x4f8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a8a      	ldr	r2, [pc, #552]	; (8002a58 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7ff fbb9 	bl	8001fac <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7ff fbb5 	bl	8001fac <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b64      	cmp	r3, #100	; 0x64
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0fd      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	4b81      	ldr	r3, [pc, #516]	; (8002a58 <HAL_RCC_OscConfig+0x4f8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x312>
 8002864:	4b7b      	ldr	r3, [pc, #492]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4a7a      	ldr	r2, [pc, #488]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6213      	str	r3, [r2, #32]
 8002870:	e02d      	b.n	80028ce <HAL_RCC_OscConfig+0x36e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x334>
 800287a:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a75      	ldr	r2, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6213      	str	r3, [r2, #32]
 8002886:	4b73      	ldr	r3, [pc, #460]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4a72      	ldr	r2, [pc, #456]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 800288c:	f023 0304 	bic.w	r3, r3, #4
 8002890:	6213      	str	r3, [r2, #32]
 8002892:	e01c      	b.n	80028ce <HAL_RCC_OscConfig+0x36e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x356>
 800289c:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4a6c      	ldr	r2, [pc, #432]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	6213      	str	r3, [r2, #32]
 80028a8:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4a69      	ldr	r2, [pc, #420]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6213      	str	r3, [r2, #32]
 80028b4:	e00b      	b.n	80028ce <HAL_RCC_OscConfig+0x36e>
 80028b6:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a66      	ldr	r2, [pc, #408]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6213      	str	r3, [r2, #32]
 80028c2:	4b64      	ldr	r3, [pc, #400]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a63      	ldr	r2, [pc, #396]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d015      	beq.n	8002902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7ff fb69 	bl	8001fac <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7ff fb65 	bl	8001fac <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0ab      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f4:	4b57      	ldr	r3, [pc, #348]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ee      	beq.n	80028de <HAL_RCC_OscConfig+0x37e>
 8002900:	e014      	b.n	800292c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7ff fb53 	bl	8001fac <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7ff fb4f 	bl	8001fac <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e095      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002920:	4b4c      	ldr	r3, [pc, #304]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ee      	bne.n	800290a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d105      	bne.n	800293e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002932:	4b48      	ldr	r3, [pc, #288]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4a47      	ldr	r2, [pc, #284]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8081 	beq.w	8002a4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002948:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d061      	beq.n	8002a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d146      	bne.n	80029ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295c:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_RCC_OscConfig+0x4fc>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7ff fb23 	bl	8001fac <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296a:	f7ff fb1f 	bl	8001fac <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e067      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297c:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002990:	d108      	bne.n	80029a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002992:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	492d      	ldr	r1, [pc, #180]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a19      	ldr	r1, [r3, #32]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	430b      	orrs	r3, r1
 80029b6:	4927      	ldr	r1, [pc, #156]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_OscConfig+0x4fc>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7ff faf3 	bl	8001fac <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ca:	f7ff faef 	bl	8001fac <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e037      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x46a>
 80029e8:	e02f      	b.n	8002a4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ea:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <HAL_RCC_OscConfig+0x4fc>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7ff fadc 	bl	8001fac <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f8:	f7ff fad8 	bl	8001fac <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e020      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x498>
 8002a16:	e018      	b.n	8002a4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e013      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	42420060 	.word	0x42420060

08002a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0d0      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 0207 	bic.w	r2, r3, #7
 8002a8a:	4965      	ldr	r1, [pc, #404]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ac6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ade:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	494d      	ldr	r1, [pc, #308]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d040      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d115      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e073      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06b      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4936      	ldr	r1, [pc, #216]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7ff fa2c 	bl	8001fac <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7ff fa28 	bl	8001fac <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e053      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d210      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	4922      	ldr	r1, [pc, #136]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e032      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4916      	ldr	r1, [pc, #88]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490e      	ldr	r1, [pc, #56]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f821 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490a      	ldr	r1, [pc, #40]	; (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1cc>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_ClockConfig+0x1d0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff f98a 	bl	8001f28 <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40022000 	.word	0x40022000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08003540 	.word	0x08003540
 8002c2c:	20000080 	.word	0x20000080
 8002c30:	20000084 	.word	0x20000084

08002c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x30>
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x36>
 8002c62:	e027      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c66:	613b      	str	r3, [r7, #16]
      break;
 8002c68:	e027      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	0c9b      	lsrs	r3, r3, #18
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c74:	5cd3      	ldrb	r3, [r2, r3]
 8002c76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	0c5b      	lsrs	r3, r3, #17
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c96:	fb02 f203 	mul.w	r2, r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e004      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	613b      	str	r3, [r7, #16]
      break;
 8002cb2:	e002      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb6:	613b      	str	r3, [r7, #16]
      break;
 8002cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cba:	693b      	ldr	r3, [r7, #16]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	007a1200 	.word	0x007a1200
 8002cd0:	08003550 	.word	0x08003550
 8002cd4:	08003560 	.word	0x08003560
 8002cd8:	003d0900 	.word	0x003d0900

08002cdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <RCC_Delay+0x34>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <RCC_Delay+0x38>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	0a5b      	lsrs	r3, r3, #9
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cf8:	bf00      	nop
  }
  while (Delay --);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1e5a      	subs	r2, r3, #1
 8002cfe:	60fa      	str	r2, [r7, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f9      	bne.n	8002cf8 <RCC_Delay+0x1c>
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	20000080 	.word	0x20000080
 8002d14:	10624dd3 	.word	0x10624dd3

08002d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e041      	b.n	8002dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fe fbc0 	bl	80014c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f000 fa56 	bl	8003208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d001      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e035      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a16      	ldr	r2, [pc, #88]	; (8002e48 <HAL_TIM_Base_Start_IT+0x90>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d009      	beq.n	8002e06 <HAL_TIM_Base_Start_IT+0x4e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfa:	d004      	beq.n	8002e06 <HAL_TIM_Base_Start_IT+0x4e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <HAL_TIM_Base_Start_IT+0x94>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d111      	bne.n	8002e2a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d010      	beq.n	8002e3a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	e007      	b.n	8002e3a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400

08002e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d020      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0202 	mvn.w	r2, #2
 8002e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f998 	bl	80031d0 <HAL_TIM_IC_CaptureCallback>
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f98b 	bl	80031be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f99a 	bl	80031e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d020      	beq.n	8002f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01b      	beq.n	8002f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0204 	mvn.w	r2, #4
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f972 	bl	80031d0 <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f965 	bl	80031be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f974 	bl	80031e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d020      	beq.n	8002f4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01b      	beq.n	8002f4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0208 	mvn.w	r2, #8
 8002f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2204      	movs	r2, #4
 8002f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f94c 	bl	80031d0 <HAL_TIM_IC_CaptureCallback>
 8002f38:	e005      	b.n	8002f46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f93f 	bl	80031be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f94e 	bl	80031e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d020      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01b      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0210 	mvn.w	r2, #16
 8002f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f926 	bl	80031d0 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f919 	bl	80031be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f928 	bl	80031e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0201 	mvn.w	r2, #1
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fe f888 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fa6f 	bl	80034be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00c      	beq.n	8003004 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f8f8 	bl	80031f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00c      	beq.n	8003028 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0220 	mvn.w	r2, #32
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fa42 	bl	80034ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIM_ConfigClockSource+0x1c>
 8003048:	2302      	movs	r3, #2
 800304a:	e0b4      	b.n	80031b6 <HAL_TIM_ConfigClockSource+0x186>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800306a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003084:	d03e      	beq.n	8003104 <HAL_TIM_ConfigClockSource+0xd4>
 8003086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308a:	f200 8087 	bhi.w	800319c <HAL_TIM_ConfigClockSource+0x16c>
 800308e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003092:	f000 8086 	beq.w	80031a2 <HAL_TIM_ConfigClockSource+0x172>
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	d87f      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 800309c:	2b70      	cmp	r3, #112	; 0x70
 800309e:	d01a      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0xa6>
 80030a0:	2b70      	cmp	r3, #112	; 0x70
 80030a2:	d87b      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b60      	cmp	r3, #96	; 0x60
 80030a6:	d050      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x11a>
 80030a8:	2b60      	cmp	r3, #96	; 0x60
 80030aa:	d877      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030ac:	2b50      	cmp	r3, #80	; 0x50
 80030ae:	d03c      	beq.n	800312a <HAL_TIM_ConfigClockSource+0xfa>
 80030b0:	2b50      	cmp	r3, #80	; 0x50
 80030b2:	d873      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d058      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x13a>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d86f      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d064      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d86b      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d060      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d867      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05c      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d05a      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030d4:	e062      	b.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6899      	ldr	r1, [r3, #8]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f000 f96a 	bl	80033be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	609a      	str	r2, [r3, #8]
      break;
 8003102:	e04f      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f000 f953 	bl	80033be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003126:	609a      	str	r2, [r3, #8]
      break;
 8003128:	e03c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	461a      	mov	r2, r3
 8003138:	f000 f8ca 	bl	80032d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2150      	movs	r1, #80	; 0x50
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f921 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8003148:	e02c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	461a      	mov	r2, r3
 8003158:	f000 f8e8 	bl	800332c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2160      	movs	r1, #96	; 0x60
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f911 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8003168:	e01c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	461a      	mov	r2, r3
 8003178:	f000 f8aa 	bl	80032d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2140      	movs	r1, #64	; 0x40
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f901 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8003188:	e00c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f000 f8f8 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 800319a:	e003      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      break;
 80031a0:	e000      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
	...

08003208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <TIM_Base_SetConfig+0xc0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0x28>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0x28>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a28      	ldr	r2, [pc, #160]	; (80032cc <TIM_Base_SetConfig+0xc4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d108      	bne.n	8003242 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a20      	ldr	r2, [pc, #128]	; (80032c8 <TIM_Base_SetConfig+0xc0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d007      	beq.n	800325a <TIM_Base_SetConfig+0x52>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d003      	beq.n	800325a <TIM_Base_SetConfig+0x52>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <TIM_Base_SetConfig+0xc4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d108      	bne.n	800326c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a0d      	ldr	r2, [pc, #52]	; (80032c8 <TIM_Base_SetConfig+0xc0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d103      	bne.n	80032a0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f023 0201 	bic.w	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]
  }
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400

080032d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f023 0201 	bic.w	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 030a 	bic.w	r3, r3, #10
 800330c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f023 0210 	bic.w	r2, r3, #16
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	031b      	lsls	r3, r3, #12
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003368:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	621a      	str	r2, [r3, #32]
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f043 0307 	orr.w	r3, r3, #7
 80033ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033be:	b480      	push	{r7}
 80033c0:	b087      	sub	sp, #28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	021a      	lsls	r2, r3, #8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	609a      	str	r2, [r3, #8]
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003410:	2302      	movs	r3, #2
 8003412:	e041      	b.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003460:	d004      	beq.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10c      	bne.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	4313      	orrs	r3, r2
 800347c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40000400 	.word	0x40000400

080034ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <__libc_init_array>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	2600      	movs	r6, #0
 80034d4:	4d0c      	ldr	r5, [pc, #48]	; (8003508 <__libc_init_array+0x38>)
 80034d6:	4c0d      	ldr	r4, [pc, #52]	; (800350c <__libc_init_array+0x3c>)
 80034d8:	1b64      	subs	r4, r4, r5
 80034da:	10a4      	asrs	r4, r4, #2
 80034dc:	42a6      	cmp	r6, r4
 80034de:	d109      	bne.n	80034f4 <__libc_init_array+0x24>
 80034e0:	f000 f822 	bl	8003528 <_init>
 80034e4:	2600      	movs	r6, #0
 80034e6:	4d0a      	ldr	r5, [pc, #40]	; (8003510 <__libc_init_array+0x40>)
 80034e8:	4c0a      	ldr	r4, [pc, #40]	; (8003514 <__libc_init_array+0x44>)
 80034ea:	1b64      	subs	r4, r4, r5
 80034ec:	10a4      	asrs	r4, r4, #2
 80034ee:	42a6      	cmp	r6, r4
 80034f0:	d105      	bne.n	80034fe <__libc_init_array+0x2e>
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f8:	4798      	blx	r3
 80034fa:	3601      	adds	r6, #1
 80034fc:	e7ee      	b.n	80034dc <__libc_init_array+0xc>
 80034fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003502:	4798      	blx	r3
 8003504:	3601      	adds	r6, #1
 8003506:	e7f2      	b.n	80034ee <__libc_init_array+0x1e>
 8003508:	08003564 	.word	0x08003564
 800350c:	08003564 	.word	0x08003564
 8003510:	08003564 	.word	0x08003564
 8003514:	08003568 	.word	0x08003568

08003518 <memset>:
 8003518:	4603      	mov	r3, r0
 800351a:	4402      	add	r2, r0
 800351c:	4293      	cmp	r3, r2
 800351e:	d100      	bne.n	8003522 <memset+0xa>
 8003520:	4770      	bx	lr
 8003522:	f803 1b01 	strb.w	r1, [r3], #1
 8003526:	e7f9      	b.n	800351c <memset+0x4>

08003528 <_init>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr

08003534 <_fini>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	bf00      	nop
 8003538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353a:	bc08      	pop	{r3}
 800353c:	469e      	mov	lr, r3
 800353e:	4770      	bx	lr
